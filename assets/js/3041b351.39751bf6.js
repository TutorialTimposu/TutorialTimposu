"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[1572],{5455:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var t=e(949),i=e(4848),l=e(8453);const s={slug:"java-reflection",title:"Apa itu Java Reflection",authors:"topekox",tags:["java","java reflection"]},r=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Contoh Sederhana",id:"contoh-sederhana",level:2},{value:"Java Reflection menggunakan Java Annotation",id:"java-reflection-menggunakan-java-annotation",level:2},{value:"Kesimpulan",id:"kesimpulan",level:2},{value:"Referensi",id:"referensi",level:2}];function d(a){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...a.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Java Reflection adalah fitur dalam bahasa pemrograman Java yang memungkinkan program untuk memeriksa dan memanipulasi dirinya sendiri. Fitur ini memungkinkan program untuk melihat struktur internalnya, seperti class, interface, method, dan field."}),"\n",(0,i.jsx)(n.p,{children:"Kemampuan untuk memeriksa dan memanipulasi class Java oleh dirinya sendiri (reflection) mungkin kedengarannya tidak terlalu penting, tetapi dalam bahasa pemrograman lain fitur ini tidak ada. Misalnya, tidak ada cara dalam program Pascal, C, atau C++ untuk memperoleh informasi tentang fungsi yang didefinisikan dalam program tersebut."}),"\n",(0,i.jsx)(n.p,{children:"Salah satu contoh penggunaan reflection adalah dalam pembuatan framework java, seperti misalnya pada framework Spring."}),"\n",(0,i.jsx)(n.h2,{id:"contoh-sederhana",children:"Contoh Sederhana"}),"\n",(0,i.jsx)(n.p,{children:"Untuk melihat cara kerja Java Reflection perhatikan contoh di bawah ini:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import java.lang.reflect.Method;\n\npublic class CheckMethods {\n\n        public static void main(String[] args) {\n                try {\n                        Class cls = Class.forName(args[0]);\n                        Method[] methods = cls.getDeclaredMethods();\n\n                        for (var m : methods) {\n                                System.out.println(m.toString());\n                        }\n                } catch (Exception e) {\n                        System.err.println(e);\n                }\n        }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pada contoh di atas, kita memeriksa class dengan ",(0,i.jsx)(n.code,{children:"Class cls = Class.forName(args[0])"})," melalui argumen yang dimasukan ketika menjalankan perintah ",(0,i.jsx)(n.code,{children:"java"})," dan memanggil semua method yang berada di dalam sebuah class melalui ",(0,i.jsx)(n.code,{children:"cls.getDeclaredMethods()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Sekarang kita akan memeriksa method sebuah class misalnya method dalam class ",(0,i.jsx)(n.code,{children:"java.lang.Runnable"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" java CheckMethods java.lang.Runnable\n"})}),"\n",(0,i.jsx)(n.p,{children:"Outputnya adalah:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"public abstract void java.lang.Runnable.run()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Yang artinya method di dalam class ",(0,i.jsx)(n.code,{children:"java.lang.Runnable"}),", hanya ada method ",(0,i.jsx)(n.code,{children:"run()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Contoh lain misalnya kita memeriksa method pada class ",(0,i.jsx)(n.code,{children:"java.util.Stack"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"java CheckMethods java.util.Stack\n"})}),"\n",(0,i.jsx)(n.p,{children:"Outputnya adalah:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"public boolean java.util.Stack.empty()\npublic synchronized java.lang.Object java.util.Stack.peek()\npublic synchronized int java.util.Stack.search(java.lang.Object)\npublic java.lang.Object java.util.Stack.push(java.lang.Object)\npublic synchronized java.lang.Object java.util.Stack.pop() \n"})}),"\n",(0,i.jsx)(n.h2,{id:"java-reflection-menggunakan-java-annotation",children:"Java Reflection menggunakan Java Annotation"}),"\n",(0,i.jsxs)(n.p,{children:["Praktek Java Reflection menggunakan Java Annotation banyak digunakan dalam  pembuatan framework java. Pada praktek kali ini kita akan membuat sebuah annotation ",(0,i.jsx)(n.code,{children:"@NotBlank"})," yang nantinya akan sebagai validasi field dalam sebuah objek. Berikut contohnya:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Membuat annotation untuk digunakan dalam setiap field"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface NotBlank {\n\n}\n\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Membuat class object User Request menggunakan annotation ",(0,i.jsx)(n.code,{children:"@NotBlank"})," yang sudah dibuat pada fieldnya"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class UserRequest {\n\t\n\t@NotBlank\n\tprivate String username;\n\t\n\t@NotBlank\n\tprivate String password;\n\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\t\n\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Membuat class Validasi"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.lang.reflect.Field;\n\npublic class ValidationUtil {\n\n\tpublic static void validationReflection(Object object) {\n\t\tClass cls = object.getClass();\n\t\tField[] fields = cls.getDeclaredFields();\n\n\t\tfor (var field : fields) {\n\t\t\tfield.setAccessible(true); // mengakses semua  access modifier pada field\n\t\t\tif (field.getAnnotation(NotBlank.class) != null) {\n\t\t\t\ttry {\n\t\t\t\t\tString value = (String) field.get(object);\n\t\t\t\t\tif (value == null || value.isBlank()) {\n\t\t\t\t\t\tthrow new RuntimeException("Field " + field.getName() + " is Blank");\n\t\t\t\t\t}\n\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t\tSystem.out.println("Tidak bisa mengakses field " + field.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mebuat class main"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class ReflectionApp {\n\n\tpublic static void main(String... args) {\n\t\tUserRequest request = new UserRequest();\n\t\t\n\t\tValidationUtil.validationReflection(request);\n\t}\n\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Jika program di atas dijalankan akan menghasilkan output exception:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Exception in thread "main" java.lang.RuntimeException: Field username is Blank\n\tat reflection.ValidationUtil.validationReflection(ValidationUtil.java:17)\n\tat reflection.ReflectionApp.main(ReflectionApp.java:8)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Output diatas terjadi  exception karena kita tidak memasukan value pada field ",(0,i.jsx)(n.code,{children:"username"})," atau ",(0,i.jsx)(n.code,{children:"password"}),". Jika kita memasukan nilai pada ",(0,i.jsx)(n.code,{children:"username"})," dan ",(0,i.jsx)(n.code,{children:"password"})," seperti di bawah ini maka exception di atas tidak terjadi:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'UserRequest request = new UserRequest();\nrequest.setUsername("ucup");\nrequest.setPassword("rahasia");\n\t\t\nValidationUtil.validationReflection(request);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"kesimpulan",children:"Kesimpulan"}),"\n",(0,i.jsx)(n.p,{children:"Java Reflection mungkin jarang digunakan dalam prakteknya sehari-hati tapi sangat berguna ketika digunakan bersama Java Annotation dalam pembuatan Framework Java."}),"\n",(0,i.jsx)(n.h2,{id:"referensi",children:"Referensi"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.oracle.com/technical-resources/articles/java/javareflection.html",children:"https://www.oracle.com/technical-resources/articles/java/javareflection.html"})}),"\n"]})]})}function u(a={}){const{wrapper:n}={...(0,l.R)(),...a.components};return n?(0,i.jsx)(n,{...a,children:(0,i.jsx)(d,{...a})}):d(a)}},8453:(a,n,e)=>{e.d(n,{R:()=>s,x:()=>r});var t=e(6540);const i={},l=t.createContext(i);function s(a){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof a?a(n):{...n,...a}}),[n,a])}function r(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(i):a.components||i:s(a.components),t.createElement(l.Provider,{value:n},a.children)}},949:a=>{a.exports=JSON.parse('{"permalink":"/blog/java-reflection","source":"@site/blog/2024-02-28-java-reflection.md","title":"Apa itu Java Reflection","description":"Java Reflection adalah fitur dalam bahasa pemrograman Java yang memungkinkan program untuk memeriksa dan memanipulasi dirinya sendiri. Fitur ini memungkinkan program untuk melihat struktur internalnya, seperti class, interface, method, dan field.","date":"2024-02-28T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java reflection","permalink":"/blog/tags/java-reflection"}],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-reflection","title":"Apa itu Java Reflection","authors":"topekox","tags":["java","java reflection"]},"unlisted":false,"prevItem":{"title":"Belajar Java Generic","permalink":"/blog/java-generic"},"nextItem":{"title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","permalink":"/blog/menulis-versi-rilis-software"}}')}}]);