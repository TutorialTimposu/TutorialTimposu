"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[6618],{4375:(a,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"java-generic/generic-bounded-type","title":"Java Generic Bounded Type","description":"Dalam kasus tertentu, kadang kita ingin membatasi type data apa saja yang boleh digunakan dalam generic parameter type. Kita bisa menambahkan constraint di generic parameter type, dengan mendifiniskan type data yang diperbolehkan, maka secara otomatis type data yang digunakan adalah type data yang telah didefinisikan atau class turunannya. Secara default constraint type yang digunakan dalam generic parameter type adalah Object, sehingga semua type data bisa digunakan.","source":"@site/tutorial/java/java-generic/08-generic-bounded-type.md","sourceDirName":"java-generic","slug":"/java-generic/generic-bounded-type","permalink":"/java/java-generic/generic-bounded-type","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Java Generic Bounded Type"},"sidebar":"tutorialSidebar","previous":{"title":"Java Generic Wildcard","permalink":"/java/java-generic/generic-wildcard"}}');var i=e(4848),r=e(8453);const s={sidebar_position:11,title:"Java Generic Bounded Type"},d=void 0,l={},c=[{value:"Multiple Parameter Bounded Type",id:"multiple-parameter-bounded-type",level:2}];function o(a){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...a.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Dalam kasus tertentu, kadang kita ingin membatasi type data apa saja yang boleh digunakan dalam generic parameter type. Kita bisa menambahkan constraint di generic parameter type, dengan mendifiniskan type data yang diperbolehkan, maka secara otomatis type data yang digunakan adalah type data yang telah didefinisikan atau class turunannya. Secara default constraint type yang digunakan dalam generic parameter type adalah Object, sehingga semua type data bisa digunakan."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"class NumberData<T extends Number> {\n\t\t\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Dari contoh di atas pada parameter type yang boleh dimasukan pada class NumberData adalah type data ",(0,i.jsx)(t.code,{children:"Number"})," atau class turunannya."]}),"\n",(0,i.jsx)(t.p,{children:"Contoh:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class DemoBoundedTypeParameter {\n\n\tstatic class NumberData<T extends Number> {\n\t\t\n\t\tprivate T data;\n\t\t\n\t\tpublic NumberData(T data) {\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tpublic T getData() {\n\t\t\treturn data;\n\t\t}\n\n\t\tpublic void setData(T data) {\n\t\t\tthis.data = data;\n\t\t}\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tNumberData<Number> numberData = new NumberData<Number>(2025);\n\t\tNumberData<Integer> intData = new NumberData<Integer>(2);\n\t\tNumberData<Long> longData = new NumberData<Long>(1L);\n//\t\tNumberData<String> strData = new NumberData<String>("Halo Bro!!!"); // ERROR: karena String buka turunan class Number\n\t\t\n\t\tSystem.out.println(numberData.getData());\n\t\tSystem.out.println(intData.getData());\n\t\tSystem.out.println(longData.getData());\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"2025\n2\n1\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Kelebihan dengan menggunakan metode di Bounded Type adalah kita dapat mengakses method yang ada pada class yang dimasukan pada generic parameter type. Contoh di atas kita menggunakan parameter dengan type data ",(0,i.jsx)(t.code,{children:"Number"}),", maka semua method pada class ",(0,i.jsx)(t.code,{children:"Number"})," bisa di akses."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'static class NumberData<T extends Number> {\n\t\t\n\tprivate T data;\n\t\n\tpublic NumberData(T data) {\n\t\tthis.data = data;\n\t}\n\n\tpublic T getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(T data) {\n\t\tthis.data = data;\n\t}\n\t\n\tpublic void getDataIntValue() {\n\t\tSystem.out.println("Nilai Integer adalah: " + data.intValue()); // Mengakses method intValue() dari class Number \n\t}\t\t\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"multiple-parameter-bounded-type",children:"Multiple Parameter Bounded Type"}),"\n",(0,i.jsxs)(t.p,{children:["Kita dapat memasukan beberapa parameter bounded type dengan menggunakan key ",(0,i.jsx)(t.code,{children:"&"})," , berguna apabila kita ingin kondisi dimana kita ingin menggunakan beberapa parameter type. ",(0,i.jsx)(t.strong,{children:"Tetapi"})," parameter kedua dan seterusnya hanya boleh bertipe interface, karena di dalam Java sebuah class tidak dapat memiliki parent lebih dari 1 class."]}),"\n",(0,i.jsx)(t.p,{children:"Contoh:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class DemoMultipleBoundedType {\n\n\tstatic interface Mamalia {\n\t\tvoid sayHello(String message);\n\t}\n\t\n\tstatic abstract class Animal {\n\t\t\n\t}\n\t\n\tstatic class Crocodile extends Animal {\n\t\t\n\t}\n\t\n\tstatic class Cat extends Animal implements Mamalia {\n\n\t\t@Override\n\t\tpublic void sayHello(String message) {\n\t\t\tSystem.out.println(message);\n\t\t}\t\t\n\t}\n\t\n\tstatic class Dog extends Animal implements Mamalia {\n\n\t\t@Override\n\t\tpublic void sayHello(String message) {\n\t\t\tSystem.out.println(message);\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t// mendeklarasikan multiple bounded type: extends Animal & implements Mamalia\t\n\tstatic class MyData<T extends Animal & Mamalia> {\n\t\t\n\t\tprivate T data;\n\n\t\tpublic MyData(T data) {\t\t\t\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tpublic T getData() {\n\t\t\tdata.sayHello("Hello from : " + data.getClass().getSimpleName()); // memanggil method sayHello() pada interface Mamalia\n\t\t\treturn data;\n\t\t}\n\n\t\tpublic void setData(T data) {\n\t\t\tthis.data = data;\n\t\t}\t\t\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tMyData<Cat> cat = new MyData<>(new Cat());\n\t\tMyData<Dog> dog = new MyData<>(new Dog());\n//\t\tMyData<Crocodile> croco = new MyData<>(new Crocodile()); // ERROR: Crocodile tidak implements Mamalia \n\n\t\tcat.getData();\n\t\tdog.getData();\n\t}\t\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Hello from : Cat\nHello from : Dog\n"})})]})}function u(a={}){const{wrapper:t}={...(0,r.R)(),...a.components};return t?(0,i.jsx)(t,{...a,children:(0,i.jsx)(o,{...a})}):o(a)}},8453:(a,t,e)=>{e.d(t,{R:()=>s,x:()=>d});var n=e(6540);const i={},r=n.createContext(i);function s(a){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof a?a(t):{...t,...a}}),[t,a])}function d(a){let t;return t=a.disableParentContext?"function"==typeof a.components?a.components(i):a.components||i:s(a.components),n.createElement(r.Provider,{value:t},a.children)}}}]);