"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[7764],{7827:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"java-collection/sorted-set","title":"Java SortedSet","description":"SortedSet adalah turunan dari interface Set, namun pada SortedSet elemen-elemen yang dimasukkan ke dalam SortedSet akan otomatis diurutkan.","source":"@site/tutorial/java/java-collection/08-sorted-set.md","sourceDirName":"java-collection","slug":"/java-collection/sorted-set","permalink":"/java/java-collection/sorted-set","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Java SortedSet"},"sidebar":"tutorialSidebar","previous":{"title":"Immutable Set","permalink":"/java/java-collection/immutable-set"},"next":{"title":"Java NavigableSet","permalink":"/java/java-collection/navigableset"}}');var r=n(4848),d=n(8453);const i={sidebar_position:8,title:"Java SortedSet"},s=void 0,o={},l=[{value:"SortedSet dengan Comparable",id:"sortedset-dengan-comparable",level:2},{value:"SortedSet dengan Comparator",id:"sortedset-dengan-comparator",level:2},{value:"Immutable SortedSet",id:"immutable-sortedset",level:2},{value:"Baca Juga",id:"baca-juga",level:2}];function c(t){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://files.codingninjas.in/article_images/sortedset-0-1649608675.webp",alt:""})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"SortedSet"})," adalah turunan dari interface ",(0,r.jsx)(e.code,{children:"Set"}),", namun pada ",(0,r.jsx)(e.code,{children:"SortedSet"})," elemen-elemen yang dimasukkan ke dalam ",(0,r.jsx)(e.code,{children:"SortedSet"})," akan otomatis diurutkan."]}),"\n",(0,r.jsxs)(e.p,{children:["Jika pada element yang dimasukan adalah turunan atau implementasi dari interface ",(0,r.jsx)(e.code,{children:"Comparable"}),", maka secara otomatis akan diurutkan menggunakan comparable tersebut."]}),"\n",(0,r.jsxs)(e.p,{children:["Jika element bukan turunan atau implementasi dari interface ",(0,r.jsx)(e.code,{children:"Comparable"}),", maka kita bisa menggunakan ",(0,r.jsx)(e.code,{children:"Comparator"})," untuk kemudian di beri tahu kepada ",(0,r.jsx)(e.code,{children:"SortedSet"})," bagaimana cara mengurutkan elemen-elemennya."]}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Baca Juga"}),":"]}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/blog/java-comparable-interface",children:"Java Comparable"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/blog/java-comparator-interface",children:"Java Comparator"})}),"\n"]})]}),"\n",(0,r.jsxs)(e.p,{children:["Method yang dapat digunakan pada ",(0,r.jsx)(e.code,{children:"SortedSet"}),":"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:n(1354).A+"",width:"343",height:"389"})}),"\n",(0,r.jsx)(e.h2,{id:"sortedset-dengan-comparable",children:"SortedSet dengan Comparable"}),"\n",(0,r.jsxs)(e.p,{children:["Jika pada element yang dimasukan adalah turunan atau implementasi dari interface ",(0,r.jsx)(e.code,{children:"Comparable"}),", maka secara otomatis akan diurutkan menggunakan comparable tersebut."]}),"\n",(0,r.jsx)(e.p,{children:"Contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class DemoSortedSet {\n\t\n\tstatic class Student implements Comparable<Student> {\n\t\t\n\t\tprivate String name;\n\n\t\tpublic Student(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn "Student (name=" + name + ")";\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Student o) {\n\t\t\treturn this.getName().compareTo(o.getName());\n\t\t}\t\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSortedSet<Student> students = new TreeSet<>();\n\t\tstudents.add(new Student("Nathan"));\n\t\tstudents.add(new Student("Lina"));\n\t\tstudents.add(new Student("Abid"));\n\t\tstudents.add(new Student("Astutik"));\n\t\t\n\t\tfor (var s : students) {\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Student (name=Abid)\nStudent (name=Astutik)\nStudent (name=Lina)\nStudent (name=Nathan)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"sortedset-dengan-comparator",children:"SortedSet dengan Comparator"}),"\n",(0,r.jsxs)(e.p,{children:["Jika element bukan turunan atau implementasi dari interface ",(0,r.jsx)(e.code,{children:"Comparable"}),", maka kita bisa menggunakan ",(0,r.jsx)(e.code,{children:"Comparator"})," untuk kemudian di beri tahu kepada ",(0,r.jsx)(e.code,{children:"SortedSet"})," bagaimana cara mengurutkan elemen-elemennya."]}),"\n",(0,r.jsx)(e.p,{children:"Contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Comparator;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class DemoSortedSet {\n\t\n\tstatic class Student {\n\t\t\n\t\tprivate String name;\n\n\t\tpublic Student(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn "Student (name=" + name + ")";\n\t\t}\n\t}\n\t\n\tstatic class StudentComparator implements Comparator<Student> {\n\n\t\t@Override\n\t\tpublic int compare(Student o1, Student o2) {\n\t\t\treturn o1.getName().compareTo(o2.getName());\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSortedSet<Student> students = new TreeSet<>(new StudentComparator());\n\t\tstudents.add(new Student("Recky"));\n\t\tstudents.add(new Student("Anisa"));\n\t\tstudents.add(new Student("Restu"));\n\t\tstudents.add(new Student("Ade"));\n\t\t\n\t\tfor (var s : students) {\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\t}\n\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Student (name=Ade)\nStudent (name=Anisa)\nStudent (name=Recky)\nStudent (name=Restu)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"immutable-sortedset",children:"Immutable SortedSet"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"SortedSet"})," dapat dibuat menjadi immutable menggunakan metod static:"]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Nama Method"}),(0,r.jsx)(e.th,{children:"Keterangan"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Collections.emptySortedSet()"})}),(0,r.jsx)(e.td,{children:"Membuat immutable sorted set kosong"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Collections.unmodifiableSortedSet()"})}),(0,r.jsx)(e.td,{children:"Mengubah mutable sorted set menjadi immutable"})]})]})]}),"\n",(0,r.jsx)(e.p,{children:"Contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'SortedSet<Student> immutableStudent = Collections.unmodifiableSortedSet(students);\n\t\nimmutableStudent.add(new Student("Dika")); // Error \n\t\nstudents = Collections.emptySortedSet();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"baca-juga",children:"Baca Juga"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/blog/java-comparable-interface",children:"Java Comparable"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/blog/java-comparator-interface",children:"Java Comparator"})}),"\n"]})]})}function u(t={}){const{wrapper:e}={...(0,d.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}},1354:(t,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/images/sortedset-cc53c1c21070dfde7ece1864934a0612.png"},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>s});var a=n(6540);const r={},d=a.createContext(r);function i(t){const e=a.useContext(d);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),a.createElement(d.Provider,{value:e},t.children)}}}]);