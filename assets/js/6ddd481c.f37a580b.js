"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[7597],{3003:(a,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>e,toc:()=>l});const e=JSON.parse('{"id":"java-generic/generic-contravariant","title":"Java Generic Contravariant","description":"Contravariant adalah kebalikan dari covariant , contravariant artinya kita dapat subtitusi supertype(class parent) dengan subtype(class child). Agar generic object menjadi contravariant adalah menggunakan key ` contoh MyClass , maka bisa disubtitusi menjadi `. Contravariant bisa write read, artinya kita bisa mengubah data generic-nya, kita bisa melakukan setter & getter.","source":"@site/tutorial/java/java-generic/06-generic-contravariant.md","sourceDirName":"java-generic","slug":"/java-generic/generic-contravariant","permalink":"/java/java-generic/generic-contravariant","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"Java Generic Contravariant"},"sidebar":"tutorialSidebar","previous":{"title":"Java Generic Covariant","permalink":"/java/java-generic/generic-covariant"},"next":{"title":"Java Generic Wildcard","permalink":"/java/java-generic/generic-wildcard"}}');var r=n(4848),i=n(8453);const s={sidebar_position:9,title:"Java Generic Contravariant"},c=void 0,o={},l=[];function d(a){const t={code:"code",em:"em",p:"p",pre:"pre",...(0,i.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Contravariant"})," adalah kebalikan dari ",(0,r.jsx)(t.em,{children:"covariant"})," , ",(0,r.jsx)(t.em,{children:"contravariant"})," artinya kita dapat subtitusi supertype(class parent) dengan subtype(class child). Agar generic object menjadi ",(0,r.jsx)(t.em,{children:"contravariant"})," adalah menggunakan key ",(0,r.jsx)(t.code,{children:"< ? super ChildClass >"})," contoh ",(0,r.jsx)(t.code,{children:"MyClass<Object>"})," , maka bisa disubtitusi menjadi ",(0,r.jsx)(t.code,{children:"< ? super String >"}),". ",(0,r.jsx)(t.em,{children:"Contravariant"})," bisa write read, artinya kita bisa mengubah data generic-nya, kita bisa melakukan setter & getter."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"void doContravariant(MyClass<? super String> data) {\r\n\t\r\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Contoh:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class DemoContravariant {\r\n\t\r\n\tstatic class MyClass<T> {\r\n\r\n\t\tprivate T value;\r\n\r\n\t\tpublic MyClass(T value) {\r\n\t\t\tthis.value = value;\r\n\t\t}\r\n\r\n\t\tpublic T getValue() {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tpublic void setValue(T value) {\r\n\t\t\tthis.value = value;\r\n\t\t}\r\n\t}\r\n\t\r\n\tstatic void doContravariant(MyClass<? super String> data) {\r\n\t\tSystem.out.println(data.getValue());\r\n\t\tdata.setValue("Happy with Java");\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tMyClass<Object> myClass = new MyClass<Object>("Hallo Bro!!!!");\r\n\t\tMyClass<? super String> strData = myClass;\r\n\t\t\r\n\t\tSystem.out.println(strData.getValue());\r\n\t\tmyClass.setValue("Demo Contravariant");\r\n\t\tdoContravariant(myClass);\r\n\t\tSystem.out.println(myClass.getValue());\r\n\t}\r\n\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Hallo Bro!!!!\r\nDemo Contravariant\r\nHappy with Java\n"})})]})}function u(a={}){const{wrapper:t}={...(0,i.R)(),...a.components};return t?(0,r.jsx)(t,{...a,children:(0,r.jsx)(d,{...a})}):d(a)}},8453:(a,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var e=n(6540);const r={},i=e.createContext(r);function s(a){const t=e.useContext(i);return e.useMemo((function(){return"function"==typeof a?a(t):{...t,...a}}),[t,a])}function c(a){let t;return t=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:s(a.components),e.createElement(i.Provider,{value:t},a.children)}}}]);