"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[6042],{7771:(t,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>m});var a=r(2197),e=r(4848),i=r(8453);const s={slug:"java-comparable-interface",title:"Belajar Java Comparable",authors:"topekox",tags:["java","java comparable"]},o=void 0,l={authorsImageUrls:[void 0]},m=[{value:"Contoh 1: membuat perbandingan untuk melakukan sorting integer",id:"contoh-1-membuat-perbandingan-untuk-melakukan-sorting-integer",level:4},{value:"Interface Comparable",id:"interface-comparable",level:3},{value:"Contoh 2: membuat perbandingan sortir pair string dan integer",id:"contoh-2-membuat-perbandingan-sortir-pair-string-dan-integer",level:4},{value:"Contoh 3: membuat perbandingan sortir string dan string",id:"contoh-3-membuat-perbandingan-sortir-string-dan-string",level:4}];function u(t){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:["Interface Comparable pada Java digunakan untuk menentukan urutan objek pada class yang didefinisikan. Interface ini merupakan bagian dari paket ",(0,e.jsx)(n.code,{children:"java.lang"})," dan menyediakan method ",(0,e.jsx)(n.code,{children:"compareTo()"})," untuk membandingkan instance class. Class harus mengimplementasikan interface ",(0,e.jsx)(n.code,{children:"Comparable"})," untuk menentukan urutannya. Method ",(0,e.jsx)(n.code,{children:"compareTo()"})," akan me-return bilangan bulat negatif, nol, atau bilangan bulat positif, untuk hasi objek yang lebih kecil dari, sama dengan, atau lebih besar dari objek yang ditentukan."]}),"\n",(0,e.jsx)(n.h4,{id:"contoh-1-membuat-perbandingan-untuk-melakukan-sorting-integer",children:"Contoh 1: membuat perbandingan untuk melakukan sorting integer"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\r\n\r\npublic class DemoComparable {\r\n\t\r\n\tstatic class MyNumber implements Comparable<MyNumber> {\r\n\r\n\t\tprivate int value;\r\n\t\t\r\n\t\tpublic MyNumber(int value) {\r\n\t\t\tthis.value = value;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(MyNumber o) {\r\n\t\t\t\r\n\t\t\t// Ascending order\r\n\t\t\treturn this.value - o.value;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\treturn String.valueOf(this.value);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tMyNumber[] n = {\r\n\t\t\tnew MyNumber(4),\t\r\n\t\t\tnew MyNumber(7),\t\r\n\t\t\tnew MyNumber(3),\t\r\n\t\t\tnew MyNumber(9),\t\r\n\t\t\tnew MyNumber(5)\t\r\n\t\t};\r\n\t\t\r\n\t\tSystem.out.println("Sebelum sorting: " + Arrays.toString(n));\r\n\t\t\r\n\t\t// Sorting\r\n\t\tArrays.sort(n);\r\n\t\t\r\n\t\tSystem.out.println("Setelah sorting: " + Arrays.toString(n));\t\t\r\n\t}\r\n\r\n}\n'})}),"\n",(0,e.jsx)(n.p,{children:"Output:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"Sebelum sorting: [4, 7, 3, 9, 5]\r\nSetelah sorting: [3, 4, 5, 7, 9]\n"})}),"\n",(0,e.jsx)(n.h3,{id:"interface-comparable",children:"Interface Comparable"}),"\n",(0,e.jsxs)(n.p,{children:["Interface Comparable merupakan interface yang hanya memiliki 1 method yaitu ",(0,e.jsx)(n.code,{children:"compareTo(T obj)"}),":"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"public interface Comparable<T> {\r\n\r\n    int compareTo(T obj);\r\n\r\n}\n"})}),"\n",(0,e.jsxs)(n.p,{children:["dimana, ",(0,e.jsx)(n.code,{children:"T"})," adalah type objek yang akan di compare."]}),"\n",(0,e.jsx)(n.p,{children:"Hasil perbandingan akan mengembalikan nilai:"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"Negative, jika currentObj < specifiedObj."}),"\n",(0,e.jsx)(n.li,{children:"Zero, jika currentObj == specifiedObj."}),"\n",(0,e.jsx)(n.li,{children:"Positive, jika currentObj > specifiedobj."}),"\n"]}),"\n",(0,e.jsx)(n.h4,{id:"contoh-2-membuat-perbandingan-sortir-pair-string-dan-integer",children:"Contoh 2: membuat perbandingan sortir pair string dan integer"}),"\n",(0,e.jsx)(n.p,{children:"Pada contoh berikut kita akan melakukan compare pada type string dan integer, object pertama yang akan di sortir string, jika objek string sama maka disortir adalah yang integer."}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\r\n\r\npublic class DemoComparableStringInteger {\r\n\t\r\n\tstatic class Pair implements Comparable<Pair> {\r\n\t\t\r\n\t\tprivate String theString;\r\n\t\tprivate int theInteger;\r\n\t\t\r\n\t\tpublic Pair(String theString, int theInteger) {\r\n\t\t\tthis.theString = theString;\r\n\t\t\tthis.theInteger = theInteger;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(Pair o) {\r\n\t\t\t\r\n\t\t\t// Jika string tidak sama\r\n\t\t\tif (this.theString.compareTo(o.theString) != 0) {\r\n\t\t\t\treturn this.theString.compareTo(o.theString);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Jika string sama\r\n\t\t\treturn this.theInteger - o.theInteger;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\treturn "[" + theString + " , " + theInteger + "]";\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static void main(String... args) {\r\n\t\tPair[] pair = {\r\n\t\t\tnew Pair("Ucup", 2),\r\n\t\t\tnew Pair("Ade", 5),\r\n\t\t\tnew Pair("Recky", 4),\r\n\t\t\tnew Pair("Ade", 3),\r\n\t\t\tnew Pair("Restu", 1)\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tSystem.out.println("Sebelum Sortir");\r\n\r\n\t\t// Sebelum sortir\r\n\t\tfor (var p : pair) {\r\n\t\t\tSystem.out.println(p);\r\n\t\t}\r\n\t\t\r\n\t\t// Sortir\r\n\t\tArrays.sort(pair);\r\n\t\t\r\n\t\tSystem.out.println("\\nSetelah Sortir");\r\n\t\t\r\n\t\t// Setelah sortir\r\n\t\tfor (var p : pair) {\r\n\t\t\tSystem.out.println(p);\r\n\t\t}\t\t\r\n\t}\r\n}\n'})}),"\n",(0,e.jsx)(n.p,{children:"Output"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"Sebelum Sortir\r\n[Ucup , 2]\r\n[Ade , 5]\r\n[Recky , 4]\r\n[Ade , 3]\r\n[Restu , 1]\r\n\r\nSetelah Sortir\r\n[Ade , 3]\r\n[Ade , 5]\r\n[Recky , 4]\r\n[Restu , 1]\r\n[Ucup , 2]\n"})}),"\n",(0,e.jsx)(n.h4,{id:"contoh-3-membuat-perbandingan-sortir-string-dan-string",children:"Contoh 3: membuat perbandingan sortir string dan string"}),"\n",(0,e.jsx)(n.p,{children:"Pada contoh berikut kita akan melakukan compare pada type string (first name) dan string (last name), object first name yang akan di sortir terlebih dahulu, jika objek first name sama maka disortir berikutnya adalah yang last name."}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\r\n\r\npublic class DemoComparablePairString {\r\n\t\r\n\tstatic class Pair implements Comparable<Pair> {\r\n\t\t\r\n\t\tprivate String firstName;\r\n\t\t\r\n\t\tprivate String lastName;\r\n\t\t\r\n\t\tpublic Pair(String firstName, String lastName) {\r\n\t\t\tthis.firstName = firstName;\r\n\t\t\tthis.lastName = lastName;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(Pair o) {\r\n\t\t\t\r\n\t\t\t// Jika fist name tidak sama\r\n\t\t\tif (this.firstName.compareTo(o.firstName) != 0) {\r\n\t\t\t\treturn this.firstName.compareTo(o.firstName);\r\n\t\t\t}\r\n\t\t\t// jika first name sama\r\n\t\t\t// maka compare lastname\r\n\t\t\treturn this.lastName.compareTo(o.lastName);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\treturn "[ " + firstName + ", " + lastName + "]";\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String... args) {\r\n\t\t\r\n\t\tPair[] pair = {\r\n\t\t\tnew Pair("Rohamdi", "Mabud"),\t\r\n\t\t\tnew Pair("Recky", "Ardiansyah"),\t\r\n\t\t\tnew Pair("Restu", "Ramadhan")\t\r\n\t\t};\r\n\t\t\r\n\t\tSystem.out.println("Sebelum Sortir");\r\n\t\tfor (var p : pair) {\r\n\t\t\tSystem.out.println(p.toString());\r\n\t\t}\r\n\t\t\r\n\t\t// sortir\r\n\t\tArrays.sort(pair);\r\n\t\t\r\n\t\tSystem.out.println("\\nSesudah Sortir");\r\n\t\tfor (var p : pair) {\r\n\t\t\tSystem.out.println(p.toString());\r\n\t\t}\r\n\t}\r\n\r\n}\n'})}),"\n",(0,e.jsx)(n.p,{children:"Output:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"Sebelum Sortir\r\n[ Rohamdi, Mabud]\r\n[ Recky, Ardiansyah]\r\n[ Restu, Ramadhan]\r\n\r\nSesudah Sortir\r\n[ Recky, Ardiansyah]\r\n[ Restu, Ramadhan]\r\n[ Rohamdi, Mabud]\n"})})]})}function c(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(u,{...t})}):u(t)}},8453:(t,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(6540);const e={},i=a.createContext(e);function s(t){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(e):t.components||e:s(t.components),a.createElement(i.Provider,{value:n},t.children)}},2197:t=>{t.exports=JSON.parse('{"permalink":"/blog/java-comparable-interface","source":"@site/blog/2024-10-04-java-comparable-interface.md","title":"Belajar Java Comparable","description":"Interface Comparable pada Java digunakan untuk menentukan urutan objek pada class yang didefinisikan. Interface ini merupakan bagian dari paket java.lang dan menyediakan method compareTo() untuk membandingkan instance class. Class harus mengimplementasikan interface Comparable untuk menentukan urutannya. Method compareTo() akan me-return bilangan bulat negatif, nol, atau bilangan bulat positif, untuk hasi objek yang lebih kecil dari, sama dengan, atau lebih besar dari objek yang ditentukan.","date":"2024-10-04T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java comparable","permalink":"/blog/tags/java-comparable"}],"readingTime":3.22,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-comparable-interface","title":"Belajar Java Comparable","authors":"topekox","tags":["java","java comparable"]},"unlisted":false,"nextItem":{"title":"Cara Install dan menggunakan NVM (Node Version Manager)","permalink":"/blog/cara-menggunakan-nvm"}}')}}]);