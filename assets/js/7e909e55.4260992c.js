"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[1240],{6730:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"java-collection/list","title":"Java List","description":"List adalah struktur data collection yang memiliki sifat sebagai berikut:","source":"@site/tutorial/java/java-collection/04-list.md","sourceDirName":"java-collection","slug":"/java-collection/list","permalink":"/java/java-collection/list","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Java List"},"sidebar":"tutorialSidebar","previous":{"title":"Java Interface Collection","permalink":"/java/java-collection/collection"},"next":{"title":"Immutable List","permalink":"/java/java-collection/immutable-list"}}');var i=e(4848),r=e(8453);const s={sidebar_position:4,title:"Java List"},l=void 0,d={},c=[{value:"ArrayList",id:"arraylist",level:2},{value:"LinkedList",id:"linkedlist",level:2},{value:"ArrayList vs LinkedList",id:"arraylist-vs-linkedlist",level:2},{value:"Contoh ArrayList",id:"contoh-arraylist",level:3}];function o(t){const a={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"List"})," adalah struktur data collection yang memiliki sifat sebagai berikut:"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Elemen  di ",(0,i.jsx)(a.code,{children:"List"})," bisa duplikat, artinya bisa memasukkan data yang sama pada elemennya."]}),"\n",(0,i.jsxs)(a.li,{children:["Data ",(0,i.jsx)(a.code,{children:"List"})," berurut sesuai dengan posisi kita memasukkan data."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"List"})," memiliki index, sehingga kita bisa menggunakan nomor index untuk mendapatkan element di list."]}),"\n"]}),"\n",(0,i.jsxs)(a.p,{children:["Di Java ada beberapa implementasi ",(0,i.jsx)(a.code,{children:"List"}),", dan kita bisa memilih sesuai dengan kebutuhan kita."]}),"\n",(0,i.jsx)(a.h2,{id:"arraylist",children:"ArrayList"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"ArrayList"})," adalah implementasi dari ",(0,i.jsx)(a.code,{children:"List"})," seperti pada array."]}),"\n",(0,i.jsxs)(a.li,{children:["Element pada ",(0,i.jsx)(a.code,{children:"ArrayList"})," diindex seperti array."]}),"\n",(0,i.jsxs)(a.li,{children:["Default kapasitas array di ",(0,i.jsx)(a.code,{children:"ArrayList"})," adalah 10, namun ketika kita memasukkan data dan array sudah penuh, maka secara otomatis ",(0,i.jsx)(a.code,{children:"ArrayList"})," akan membuat array baru dengan kapasitas baru dengan ukuran: kapasitas lama + data baru."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"linkedlist",children:"LinkedList"}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"LinkedList"})," adalah implementasi ",(0,i.jsx)(a.code,{children:"List"})," dengan struktur data Double Linked List, data yang dimasukan akan berurut sesuai waktu memasukan data. ",(0,i.jsx)(a.code,{children:"LinkedList"})," menampung datanya berdasarkan node per node."]}),"\n",(0,i.jsx)(a.h2,{id:"arraylist-vs-linkedlist",children:"ArrayList vs LinkedList"}),"\n",(0,i.jsxs)(a.table,{children:[(0,i.jsx)(a.thead,{children:(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.th,{children:"Operation"}),(0,i.jsx)(a.th,{children:"ArrayList"}),(0,i.jsx)(a.th,{children:"LinkedList"})]})}),(0,i.jsxs)(a.tbody,{children:[(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"add"}),(0,i.jsx)(a.td,{children:"Cepat kalau indexnya belum penuh"}),(0,i.jsx)(a.td,{children:"cepat"})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"set"}),(0,i.jsx)(a.td,{children:"cepat karena berdasar index"}),(0,i.jsx)(a.td,{children:"lambat"})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"get"}),(0,i.jsx)(a.td,{children:"cepat"}),(0,i.jsx)(a.td,{children:"lambat"})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"remove"}),(0,i.jsx)(a.td,{children:"lambat harus menggeser index"}),(0,i.jsx)(a.td,{children:"cepat"})]})]})]}),"\n",(0,i.jsx)(a.h3,{id:"contoh-arraylist",children:"Contoh ArrayList"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:'import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DemoList {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tList<String> names = new ArrayList<>(); // bisa dimasukan default kapasitas contoh ArrayList<>(100)\r\n\t\tnames.add("Tirta");\r\n\t\tnames.add("Agus");\r\n\t\tnames.add("Fahmi");\r\n\t\t\r\n\t\tSystem.out.println("Data List:");\r\n\t\tprintOut(names);\r\n\t\t\r\n\t\t// ubah elemen\r\n\t\tnames.set(1, "Wayan");\r\n\t\t\r\n\t\tSystem.out.println(names.get(1));\r\n\t\tSystem.out.println("Setelah mengubah data:");\r\n\t\t\r\n\t\tprintOut(names);\r\n\t\t\r\n\t\t// hapus elemen\r\n\t\tnames.remove(1);\r\n\t\t\r\n\t\tSystem.out.println("Setelah menghapus data:");\r\n\t\tprintOut(names);\t\t\r\n\t}\r\n\t\r\n\tstatic void printOut(List<String> names) {\r\n\t\tfor(var name: names) {\r\n\t\t\tSystem.out.println(name);\t\t\t\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,i.jsx)(a.p,{children:"Output:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:"Data List:\r\nTirta\r\nAgus\r\nFahmi\r\nWayan\r\nSetelah mengubah data:\r\nTirta\r\nWayan\r\nFahmi\r\nSetelah menghapus data:\r\nTirta\r\nFahmi\n"})})]})}function h(t={}){const{wrapper:a}={...(0,r.R)(),...t.components};return a?(0,i.jsx)(a,{...t,children:(0,i.jsx)(o,{...t})}):o(t)}},8453:(t,a,e)=>{e.d(a,{R:()=>s,x:()=>l});var n=e(6540);const i={},r=n.createContext(i);function s(t){const a=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function l(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),n.createElement(r.Provider,{value:a},t.children)}}}]);