"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[1343],{6284:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"java-unit-test/before-after-test","title":"Before & After Unit Test","description":"BeforeEach & AfterEach","source":"@site/tutorial/java/java-unit-test/06-before-after-test.md","sourceDirName":"java-unit-test","slug":"/java-unit-test/before-after-test","permalink":"/java/java-unit-test/before-after-test","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Before & After Unit Test"},"sidebar":"tutorialSidebar","previous":{"title":"Disabled Unit Test","permalink":"/java/java-unit-test/disabled-test"},"next":{"title":"Aborted Unit Test","permalink":"/java/java-unit-test/aborted-unit-test"}}');var s=a(4848),i=a(8453);const l={sidebar_position:6,title:"Before & After Unit Test"},r=void 0,o={},c=[{value:"BeforeEach &amp; AfterEach",id:"beforeeach--aftereach",level:2},{value:"BeforeAll &amp; AfterAll",id:"beforeall--afterall",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"beforeeach--aftereach",children:"BeforeEach & AfterEach"}),"\n",(0,s.jsxs)(t.p,{children:["Kadang kita ingin menjalankan kode yang sama sebelum dan setelah eksekusi unit test. Hal ini sebenarnya bisa dilakukan secara manual di function ",(0,s.jsx)(t.code,{children:"@Test"})," nya, namun hal ini akan membuat kode duplikat banyak sekali."]}),"\n",(0,s.jsxs)(t.p,{children:["JUnit memiliki annotation ",(0,s.jsx)(t.code,{children:"@BeforeEach"})," dan ",(0,s.jsx)(t.code,{children:"@AfterEach"}),". ",(0,s.jsx)(t.code,{children:"@BeforeEach"})," digunakan untuk menandai function yang akan dieksekusi sebelum unit test dijalankan, sedangkan ",(0,s.jsx)(t.code,{children:"@AfterEach"})," digunakan untuk menandai function yang akan dieksekusi setelah unit test dijalankan\nIngat, bahwa ini akan selalu dieksekusi setiap kali untuk function ",(0,s.jsx)(t.code,{children:"@Test"}),", bukan sekali untuk class test saja."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@BeforeEach\npublic void testBeforeCallTestMehod() {\n\tSystem.out.println("Sebelum memanggil method Test..");\n}\n\n@AfterEach\npublic void testAfterCallTestMehod() {\n\tSystem.out.println("Setelah memanggil method Test..");\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Ketika test dijalankan maka akan dieksekusi setiap sebelum/sesudah masing-masing method dalam unit test dijalankan."}),"\n",(0,s.jsx)(t.h2,{id:"beforeall--afterall",children:"BeforeAll & AfterAll"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"@BeforeEach"})," & ",(0,s.jsx)(t.code,{children:"@AfterEach"})," akan dieksekusi setiap kali method ",(0,s.jsx)(t.code,{children:"@Test"})," jalan. Namun kadang kita ingin melakukan sesuatu sebelum semua unit test berjalan, atau setelah semua unit test berjalan. Ini bisa dilakukan menggunakan annotation ",(0,s.jsx)(t.code,{children:"@BeforeAll"})," dan ",(0,s.jsx)(t.code,{children:"@AfterAll"}),". Namun hanya ",(0,s.jsx)(t.code,{children:"static"})," method yang bisa menggunakan ",(0,s.jsx)(t.code,{children:"@BeforeAll"})," dan ",(0,s.jsx)(t.code,{children:"@AfterAll"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@BeforeAll\npublic static void testBeforeCallTest() {\n\tSystem.out.println("Sebelum memanggil class Test..");\t\t\n}\n\n@AfterAll\npublic static void testAfterCallTest() {\n\tSystem.out.println("Setelah memanggil class Test..");\t\t\t\t\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var n=a(6540);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);