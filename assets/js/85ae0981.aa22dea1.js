"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[5800],{9142:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"java-generic/generic-covariant","title":"Java Generic Covariant","description":"Walaupun sebelumnya kita sudah mengetahui bahwa secara default sifat dari type generic adalah invariant tetapi pada kondisi tertentu kita tidak harus membuat type generic selalu invariant , contohnya dengan menggunakan covariant . Covariant artinya kita dapat subtitusi subtype(class child) dengan supertype(class parent).","source":"@site/tutorial/java/java-generic/05-generic-covariant.md","sourceDirName":"java-generic","slug":"/java-generic/generic-covariant","permalink":"/java/java-generic/generic-covariant","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Java Generic Covariant"},"sidebar":"tutorialSidebar","previous":{"title":"Java Generic Invariant","permalink":"/java/java-generic/generic-invariant"},"next":{"title":"Java Generic Contravariant","permalink":"/java/java-generic/generic-contravariant"}}');var r=t(4848),i=t(8453);const s={sidebar_position:8,title:"Java Generic Covariant"},c=void 0,o={},l=[];function d(a){const e={code:"code",em:"em",p:"p",pre:"pre",...(0,i.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Walaupun sebelumnya kita sudah mengetahui bahwa secara default sifat dari type generic adalah ",(0,r.jsx)(e.em,{children:"invariant"})," tetapi pada kondisi tertentu kita tidak harus membuat type generic selalu ",(0,r.jsx)(e.em,{children:"invariant"})," , contohnya dengan menggunakan ",(0,r.jsx)(e.em,{children:"covariant"})," . ",(0,r.jsx)(e.em,{children:"Covariant"})," artinya kita dapat subtitusi subtype(class child) dengan supertype(class parent)."]}),"\n",(0,r.jsxs)(e.p,{children:["Agar generic object menjadi ",(0,r.jsx)(e.em,{children:"covariant"})," adalah dengan menggunakan key ",(0,r.jsx)(e.code,{children:"< ? extends ParentClass >"})," , contoh ",(0,r.jsx)(e.code,{children:"MyClass<String>"})," , maka bisa disubtitusi menjadi ",(0,r.jsx)(e.code,{children:"< ? extends Object >"})," , karena dalam hal ini String adalah turunan Object. ",(0,r.jsx)(e.em,{children:"Covariant"})," bersifat read only kita tidak bisa mengubah data generic-nya, kita hanya bisa melakukan getter."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"void doCovariant(MyClass<? extends Object> data) {\r\n\t\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class DemoCovariant {\r\n\r\n\tstatic class MyClass<T> {\r\n\r\n\t\tprivate T value;\r\n\r\n\t\tpublic MyClass(T value) {\r\n\t\t\tthis.value = value;\r\n\t\t}\r\n\r\n\t\tpublic T getValue() {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tpublic void setValue(T value) {\r\n\t\t\tthis.value = value;\r\n\t\t}\r\n\t}\r\n\t\r\n\tstatic void doCovariant(MyClass<? extends Object> data) {\r\n\t\tSystem.out.println(data.getValue());\r\n//\t\tdata.setValue(1); // ERROR: data akan kacau jika kita memasukan value dengan type data tertentu\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tMyClass<String> dataStr = new MyClass<String>("Halo Bro!!!");\r\n\t\tdoCovariant(dataStr);\r\n\t}\r\n\r\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Halo Bro!!!\n"})})]})}function u(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(d,{...a})}):d(a)}},8453:(a,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var n=t(6540);const r={},i=n.createContext(r);function s(a){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function c(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:s(a.components),n.createElement(i.Provider,{value:e},a.children)}}}]);