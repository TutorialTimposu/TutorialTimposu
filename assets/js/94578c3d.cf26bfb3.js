"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[9322],{6023:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>a,toc:()=>c});var a=i(5454),r=i(4848),t=i(8453);const d={slug:"service-android",title:"Membuat Service Android - Background & Foreground",authors:"topekox",tags:["android","android-java"]},o=void 0,s={authorsImageUrls:[void 0]},c=[{value:"Background Service",id:"background-service",level:2},{value:"Foreground Service",id:"foreground-service",level:2},{value:"Menambahkan Notifikasi",id:"menambahkan-notifikasi",level:3},{value:"Service Always ON",id:"service-always-on",level:3}];function l(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class ",(0,r.jsx)(e.code,{children:"IntentService"}),". Namun, sayangnya class ",(0,r.jsx)(e.code,{children:"IntentService"})," sudah di-deprecated. Tapi kita masih bisa menggunakan class ",(0,r.jsx)(e.code,{children:"Service"})," secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://images.unsplash.com/photo-1587840178393-079769787b40?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80",alt:"Android"})}),"\n",(0,r.jsx)(e.h2,{id:"background-service",children:"Background Service"}),"\n",(0,r.jsx)(e.p,{children:"Background Service digunakan untuk menjalankan Service di background, namun service ini akan mati ketika aplikasi kita dimatikan."}),"\n",(0,r.jsxs)(e.p,{children:["Cara membuatnya, yaitu buat sebuah class extends ",(0,r.jsx)(e.code,{children:"Service"})," disini saya beri nama ",(0,r.jsx)(e.code,{children:"MyBackgroundService.java"})," dan override method ",(0,r.jsx)(e.code,{children:"onStartCommand"}),", dan buat ",(0,r.jsx)(e.code,{children:"Thread"})," baru di dalam method tersebut."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:"title=MyBackgroundService.java",children:'package com.topekox.demoservice;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.IBinder;\nimport android.util.Log;\n\nimport androidx.annotation.Nullable;\n\npublic class MyBackgroundService extends Service {\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true) {\n                    Log.e("SERVICE", "Service is running...");\n                    try {\n                        Thread.sleep(2000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Pada class di atas kita membuat Thread di dalam service yang akan di eksekusi setiap interval 2 detik. Selanjutnya daftarkan class Service tersebut ke dalam ",(0,r.jsx)(e.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",children:'<service android:name=".MyBackgroundService"></service>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Kode lengkap ",(0,r.jsx)(e.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    package="com.topekox.demoservice">\n\n    <application\n        android:allowBackup="true"\n        android:dataExtractionRules="@xml/data_extraction_rules"\n        android:fullBackupContent="@xml/backup_rules"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.DemoService"\n        tools:targetApi="31">\n        <activity\n            android:name=".MainActivity"\n            android:exported="true">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n        \x3c!-- Menambahkan Service --\x3e\n        <service android:name=".MyBackgroundService"></service>\n    </application>\n\n</manifest>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Panggil Service dari class Activity, contoh dipanggil dari class ",(0,r.jsx)(e.code,{children:"MainActivity"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"Intent intentService = new Intent(this, MyBackgroundService.class);\nstartService(intentService);\n"})}),"\n",(0,r.jsx)(e.p,{children:"Gambar log ketika aplikasi dijalankan."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"log",src:i(4310).A+"",width:"1055",height:"305"})}),"\n",(0,r.jsx)(e.p,{children:"Service akan berhenti ketika aplikasi dimatikan."}),"\n",(0,r.jsx)(e.h2,{id:"foreground-service",children:"Foreground Service"}),"\n",(0,r.jsx)(e.p,{children:"Berbeda dengan Background Service, Foreground Service akan tetap berjalan meski aplikasi dimatikan."}),"\n",(0,r.jsxs)(e.p,{children:["Cara membuatnya hampir sama dengan cara sebelumnya hanya pada bagian class ",(0,r.jsx)(e.code,{children:"MainActivity"})," yang berbeda."]}),"\n",(0,r.jsxs)(e.p,{children:["Buat class extends ",(0,r.jsx)(e.code,{children:"Service"})," disini saya beri nama ",(0,r.jsx)(e.code,{children:"MyForegroundService.java"})," dan override method ",(0,r.jsx)(e.code,{children:"onStartCommand"}),", dan buat ",(0,r.jsx)(e.code,{children:"Thread"})," baru di dalam method tersebut."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:"title=MyForegroundService.java",children:'package com.topekox.demoservice;\n\nimport android.app.Notification;\nimport android.app.NotificationChannel;\nimport android.app.NotificationManager;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.IBinder;\nimport android.util.Log;\n\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\n\npublic class MyForegroundService extends Service {\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true) {\n                    Log.e("SERVICE", "Service is running...");\n                    try {\n                        Thread.sleep(2000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Daftar service dan permission ",(0,r.jsx)(e.code,{children:"FOREGROUND_SERVICE"})," ke ",(0,r.jsx)(e.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    package="com.topekox.demoservice">\n    \x3c!-- add permission --\x3e\n    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"></uses-permission>\n\n    <application\n        ...\n        <activity\n           ...\n        </activity>\n        \x3c!-- register service --\x3e\n        <service android:name=".MyForegroundService"></service>\n        ...\n    </application>\n\n</manifest>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Panggil service di ",(0,r.jsx)(e.code,{children:"MainActivity"}),", cuma disini sedikit berbeda karena di versi Android yang saya jalankan, saya harus memanggil annotation ",(0,r.jsx)(e.code,{children:"@RequiresApi(api = Build.VERSION_CODES.O)"})," untuk masalah kompatibelitas, kurang lebih method ",(0,r.jsx)(e.code,{children:"onCreate"})," seperti di bawah ini:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@RequiresApi(api = Build.VERSION_CODES.O)\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    Intent intentService = new Intent(this, MyForegroundService.class);\n    \n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\n        startForegroundService(intentService);\n    } else {\n        MainActivity.this.startService(intentService);\n    }        \n}\n"})}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:["Baca dokumentasi lengkap Foreground Service ",(0,r.jsx)(e.a,{href:"https://developer.android.com/guide/components/foreground-services",children:"di sini"}),"."]})}),"\n",(0,r.jsx)(e.h3,{id:"menambahkan-notifikasi",children:"Menambahkan Notifikasi"}),"\n",(0,r.jsxs)(e.p,{children:["Untuk menambahkan notifikasi ",(0,r.jsx)(e.code,{children:"NotificationChannel"})," pada method ",(0,r.jsx)(e.code,{children:"onStartCommand"})," di class ForegroundService:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:"title=MyForegroundService.java",children:'@RequiresApi(api = Build.VERSION_CODES.O)\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            while (true) {\n                Log.e("SERVICE", "Service is running...");\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }).start();\n\n    final String CHANNEL_ID = "Foreground Channel ID";\n    NotificationChannel channel = new NotificationChannel(\n            CHANNEL_ID,\n            CHANNEL_ID,\n            NotificationManager.IMPORTANCE_LOW);\n\n    getSystemService(NotificationManager.class).createNotificationChannel(channel);\n    Notification.Builder notification = new Notification.Builder(this, CHANNEL_ID)\n            .setContentText("Service is running")\n            .setContentTitle("Service Enabled")\n            .setSmallIcon(R.drawable.ic_launcher_background);\n\n    startForeground(1001, notification.build());\n\n    return super.onStartCommand(intent, flags, startId);\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Kita juga memberikan kondisi agar service hidup jika sebelumnya tidak hidup, tambahkan kondisi di class ",(0,r.jsx)(e.code,{children:"MainActivity"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:"title=MainActivity.java",children:"@RequiresApi(api = Build.VERSION_CODES.O)\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    if (!foregroundServiceIsRunning()) {\n        Intent intentService = new Intent(this, MyForegroundService.class);\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\n            startForegroundService(intentService);\n        } else {\n            MainActivity.this.startService(intentService);\n        }\n    }\n}\n\nprivate boolean foregroundServiceIsRunning() {\n    ActivityManager activityManager =\n            (ActivityManager) getSystemService(MainActivity.this.ACTIVITY_SERVICE);\n\n    for (ActivityManager.RunningServiceInfo service :\n            activityManager.getRunningServices(Integer.MAX_VALUE)) {\n        if (MyForegroundService.class.getName().equals(service.service.getClassName())) {\n            return true;\n        }\n    }\n    return false;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Gambar Notifikasi:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"notifikasi",src:i(5517).A+"",width:"343",height:"345"})}),"\n",(0,r.jsx)(e.h3,{id:"service-always-on",children:"Service Always ON"}),"\n",(0,r.jsxs)(e.p,{children:["Agar foreground service tetap berjalan walaupun Android telah direstart, buat sebuah class ",(0,r.jsx)(e.code,{children:"BroadcastReceiver"})," untuk mengandle ini:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:"title=MyBroadcastReceiver.java",children:"package com.topekox.demoservice;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Build;\n\nimport androidx.annotation.RequiresApi;\n\npublic class MyBroadcastReceiver extends BroadcastReceiver {\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {\n            Intent intentService = new Intent(context, MyForegroundService.class);\n            context.startForegroundService(intentService);\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Lalu tambahkan permission dan register intentnya di ",(0,r.jsx)(e.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",children:'...\n<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"></uses-permission>\n...\n \x3c!-- register receiver --\x3e\n    <receiver android:name=".MyBroadcastReceiver"\n        android:exported="true">\n        <intent-filter>\n            <action android:name="android.intent.action.BOOT_COMPLETED"></action>\n        </intent-filter>\n    </receiver>\n...\n'})}),"\n",(0,r.jsx)(e.p,{children:"Maka service akan tetap berjalan walau Android telah direstart."}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://github.com/TopekoX/sample-android-java/tree/main/DemoServiceBackgroundForeground",children:"Full Source Code"}),"."]})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},4310:(n,e,i)=>{i.d(e,{A:()=>a});const a=i.p+"assets/images/1-1e73d2318d92dc4562bb23da7be17d93.png"},5517:(n,e,i)=>{i.d(e,{A:()=>a});const a=i.p+"assets/images/2-e50d1eb0865739aeeea9c9d4a306827d.png"},8453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>o});var a=i(6540);const r={},t=a.createContext(r);function d(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:d(n.components),a.createElement(t.Provider,{value:e},n.children)}},5454:n=>{n.exports=JSON.parse('{"permalink":"/blog/service-android","source":"@site/blog/2022-06-13-service-android/index.md","title":"Membuat Service Android - Background & Foreground","description":"Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class IntentService. Namun, sayangnya class IntentService sudah di-deprecated. Tapi kita masih bisa menggunakan class Service secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service.","date":"2022-06-13T00:00:00.000Z","tags":[{"inline":true,"label":"android","permalink":"/blog/tags/android"},{"inline":true,"label":"android-java","permalink":"/blog/tags/android-java"}],"readingTime":4.075,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"service-android","title":"Membuat Service Android - Background & Foreground","authors":"topekox","tags":["android","android-java"]},"unlisted":false,"prevItem":{"title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration - Bundle Tomcat","permalink":"/blog/spring-mvc-maven-xml"},"nextItem":{"title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","permalink":"/blog/menggunakan-scheduled-spring-boot"}}')}}]);