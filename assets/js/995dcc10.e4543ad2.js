"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[9479],{1108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"java-unit-test/sorted-test","title":"Sorted Unit Test","description":"Urutan Eksekusi Test","source":"@site/tutorial/java/java-unit-test/11-sorted-test.md","sourceDirName":"java-unit-test","slug":"/java-unit-test/sorted-test","permalink":"/java/java-unit-test/sorted-test","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Sorted Unit Test"},"sidebar":"tutorialSidebar","previous":{"title":"Tag","permalink":"/java/java-unit-test/tag"},"next":{"title":"Lifecycle Unit Test","permalink":"/java/java-unit-test/lifecycle-test"}}');var i=t(4848),s=t(8453);const r={sidebar_position:11,title:"Sorted Unit Test"},d=void 0,u={},o=[{value:"Urutan Eksekusi Test",id:"urutan-eksekusi-test",level:2},{value:"Mengubah Urutan Ekseskusi Test",id:"mengubah-urutan-ekseskusi-test",level:2},{value:"Menggunakan DisplayName",id:"menggunakan-displayname",level:3},{value:"Menggunakan Random",id:"menggunakan-random",level:3},{value:"Menggunakan OrderAnnotation",id:"menggunakan-orderannotation",level:3},{value:"Membuat Ordered Sendiri",id:"membuat-ordered-sendiri",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"urutan-eksekusi-test",children:"Urutan Eksekusi Test"}),"\n",(0,i.jsx)(n.p,{children:"Secara default, urutan eksekusi unit test tidak ditentukan, jadi jangan berharap  jika sebuah method berada diatas method lainnya, maka akan dijalankan lebih dulu. Hal ini karena memang sebaiknya method unit test itu harus independen, tidak saling ketergantungan. Secara default pun, object class unit test akan selalu dibuat ulang tiap method, jadi jangan berharap kita bisa menyimpan data di variable untuk digunakan di unit test method selanjutnya."}),"\n",(0,i.jsx)(n.h2,{id:"mengubah-urutan-ekseskusi-test",children:"Mengubah Urutan Ekseskusi Test"}),"\n",(0,i.jsxs)(n.p,{children:["JUnit mendukung perubahan urutan eksekusi test jika kita mau menggunakan annotation ",(0,i.jsx)(n.code,{children:"@TestMethodOrder"}),", ada beberapa cara yang bisa kita lakukan."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DisplayName"}),", artinya urutan eksekusi unit test akan diurutkan berdasarkan alphanumeric"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Random"}),", artinya urutan urutan eksekusi unit test akan dieksekusi secara random."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"OrderAnnotation"}),", artinya urutan eksekusi  unit  test akan mengikuti annotation ",(0,i.jsx)(n.code,{children:"@Order"})," yang ada di tiap method unit test."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"menggunakan-displayname",children:"Menggunakan DisplayName"}),"\n",(0,i.jsx)(n.p,{children:"Unit test akan diurutkan berdasarkan alphanumeric dari nama method test."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(MethodOrderer.DisplayName.class)\npublic class DemoOrderedTest {\n\n\t@Test\n\tvoid testC() {\n\t\t\n\t}\n\t\n\t@Test\n\tvoid testA() {\n\t\n\t}\n\t\n\t@Test\n\tvoid testB() {\n\t\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Hasil test:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Display Name",src:t(6091).A+"",width:"504",height:"200"})}),"\n",(0,i.jsx)(n.h3,{id:"menggunakan-random",children:"Menggunakan Random"}),"\n",(0,i.jsx)(n.p,{children:"Unit test akan diurutkan secara random."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@TestMethodOrder(MethodOrderer.Random.class)\npublic class DemoOrderedTest {\n\n        @Test\n        void testA() {\n\n        }\n\n        @Test\n        void testB() {\n\n        }\n\n        @Test\n        void testC() {\n            \n        }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"menggunakan-orderannotation",children:"Menggunakan OrderAnnotation"}),"\n",(0,i.jsxs)(n.p,{children:["Unit test akan diurutkan secara order berdasarkan annotation ",(0,i.jsx)(n.code,{children:"@Order"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@TestMethodOrder(MethodOrderer.OrderAnnotation.class) // berdasarkan dari annotation @Order\npublic class DemoOrderedTest {\n\n\t@Test\n\t@Order(value = 3)\n\tvoid testC() {\n\t\t\n\t}\n\t\n\t@Test\n\t@Order(value = 1)\n\tvoid testA() {\n\t\n\t}\n\t\n\t@Test\n\t@Order(value = 2)\n\tvoid testB() {\n\t\n\t}\t\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Hasil test:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Display Name",src:t(6091).A+"",width:"504",height:"200"})}),"\n",(0,i.jsx)(n.h2,{id:"membuat-ordered-sendiri",children:"Membuat Ordered Sendiri"}),"\n",(0,i.jsxs)(n.p,{children:["Jika kita ingin membuat cara mengurutkan urutan unit test function sendiri, kita bisa dengan mudah tinggal membuat class baru turunan dari ",(0,i.jsx)(n.code,{children:"MethodOrderer"})," interface."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},6091:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/junit-order1-8a633ac4ee4ff80308759b0ec7710c80.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);