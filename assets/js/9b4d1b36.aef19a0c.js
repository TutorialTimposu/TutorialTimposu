"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[5856],{246:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>o,frontMatter:()=>u,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"java-lambda/functional-interface","title":"Functional Interface","description":"Pada Java 8, fitur Lambda diperkenalkan dan juga menyediakan package baru yang bernama java.util.function, yang berisi banyak functional interface yang bisa digunakan dalam menggunakan lambda. Dengan menggunakan interface-interface tersebut, kita tidak perlu membuat sendiri functional interface secara manual.","source":"@site/tutorial/java/java-lambda/04-functional-interface.md","sourceDirName":"java-lambda","slug":"/java-lambda/functional-interface","permalink":"/java/java-lambda/functional-interface","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Functional Interface"},"sidebar":"tutorialSidebar","previous":{"title":"Lambda Parameter","permalink":"/java/java-lambda/lambda-parameter"},"next":{"title":"Method Reference","permalink":"/java/java-lambda/method-reference"}}');var t=a(4848),r=a(8453);const u={sidebar_position:4,title:"Functional Interface"},l=void 0,s={},c=[{value:"Consumer",id:"consumer",level:2},{value:"Function",id:"function",level:2},{value:"Predicate",id:"predicate",level:2},{value:"Suplier",id:"suplier",level:2}];function d(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:["Pada Java 8, fitur Lambda diperkenalkan dan juga menyediakan package baru yang bernama ",(0,t.jsx)(e.code,{children:"java.util.function"}),", yang berisi banyak functional interface yang bisa digunakan dalam menggunakan lambda. Dengan menggunakan interface-interface tersebut, kita tidak perlu membuat sendiri functional interface secara manual."]}),"\n",(0,t.jsx)(e.p,{children:"Beberapa functional interface yang sering digunakan:"}),"\n",(0,t.jsx)(e.h2,{id:"consumer",children:"Consumer"}),"\n",(0,t.jsxs)(e.p,{children:["Functional interface ",(0,t.jsx)(e.code,{children:"Consumer"})," biasa digunakan ketika butuh ekspresi lambda untuk menerima data."]}),"\n",(0,t.jsxs)(e.p,{children:["Berikut class anonymous ",(0,t.jsx)(e.code,{children:"Consumer"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Consumer<String> consumer = new Consumer<String>() {\n    @Override\n    public void accept(String value) {\n        System.out.println(value);\n    }\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"Jika menggunakan ekpresi lambda maka kode dapat disederhanakan seperti berikut:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Consumer<String> consumer = (value) -> System.out.println(value);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"function",children:"Function"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Function<T, R>"}),", digunakan untuk memasukan Type (T) dan mengembalikan Result (R), dimana T adalah parameter-nya dan R adalah return value-nya."]}),"\n",(0,t.jsxs)(e.p,{children:["Berikut class anonymous ",(0,t.jsx)(e.code,{children:"Function"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Function<String, Integer> functionLength = new Function<String, Integer>() {\n    @Override\n    public Integer apply(String s) {\n        return s.length();\n    }\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"Jika menggunakan ekpresi lambda maka kode dapat disederhanakan seperti berikut:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Function<String, Integer>  functionLength = (s) -> s.length();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"predicate",children:"Predicate"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Predicate"})," adalah function yang akan mengembalikan nilai boolean menurut argumen yang dimasukan, mengembalikan ",(0,t.jsx)(e.code,{children:"true"})," jika input argumen yang dimasukan sesuai dalam method test, dan ",(0,t.jsx)(e.code,{children:"false"})," jika sebaliknya."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Predicate<String> predicate = new Predicate<String>() {\n    @Override\n    public boolean test(String s) {\n        return s.isBlank();\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"suplier",children:"Suplier"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Suplier"})," function yang digunakan untuk mengembalikan result tanpa perlu mengirim parameter."]}),"\n",(0,t.jsxs)(e.p,{children:["Berikut contoh class anonymous ",(0,t.jsx)(e.code,{children:"Suplier"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'Supplier<String> supplier = new Supplier<String>() {\t\t\n\t@Override\n\tpublic String get() {\n\t\treturn "Hallo Bro!!!!";\n\t}\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:"Jika menggunakan ekpresi lambda maka kode dapat disederhanakan seperti berikut:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'Supplier<String> supplier = () -> "Hallo Bro!!!";\n'})}),"\n",(0,t.jsx)(e.p,{children:"Berikut kode full contoh di atas:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'import java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\n\npublic class DemoLambdaFunctionalInterface {\n    public static void main(String[] args) {\n\n        // functional interface Consumer\n        // biasa digunakan ketika butuh lambda untuk menerima data\n        //\n        //Consumer<String> consumer = new Consumer<String>() {\n        //    @Override\n        //    public void accept(String value) {\n        //        System.out.println(value);\n        //    }\n        // };\n\n        Consumer<String> consumer = (value) -> System.out.println(value);\n\n        consumer.accept("Halo Bro!!!");\n\n        // Function<T, R>, digunakan untuk memasukan Type (T) dan mengembalikan Result (R)\n        // dimana T adalah parameter-nya dan R adalah return value-nya.\n        //\n        // Function<String, Integer> functionLength = new Function<String, Integer>() {\n        //    @Override\n        //    public Integer apply(String s) {\n        //        return s.length();\n        //    }\n        //  };\n\n        Function<String, Integer>  functionLength = (s) -> s.length();\n        System.out.println(functionLength.apply("Ucup"));\n\n        // Predicate: function yang akan mengembalikan nilai boolean menurut argumen yang dimasukan,\n        // mengembalikan true jika input argumen yang dimasukan sesuai dalam method test,\n        // dan false jika sebaliknya.\n        //\n        // Predicate<String> predicate = new Predicate<String>() {\n        //    @Override\n        //    public boolean test(String s) {\n        //        return s.isBlank();\n        //   }\n        // };\n\n        Predicate<String> predicate = (s) -> s.isBlank();\n        System.out.println(predicate.test(""));\n        \n        // Supplier: function yang digunakan untuk mengembalikan result tanpa perlu mengirim parameter\n        // \n        // Supplier<String> supplier = new Supplier<String>() {\t\t\n\t\t//\t@Override\n\t\t//\tpublic String get() {\n\t\t//\t\treturn "Hallo Bro!!!!";\n\t\t//\t}\n\t\t// };\n        \n        Supplier<String> supplier = () -> "Hallo Bro!!!";\n\t\t\n\t\tSystem.out.println(supplier.get());\n    }\n}\n'})})]})}function o(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>u,x:()=>l});var i=a(6540);const t={},r=i.createContext(t);function u(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:u(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);