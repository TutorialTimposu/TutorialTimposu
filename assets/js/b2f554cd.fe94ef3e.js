"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"spring-logging","metadata":{"permalink":"/blog/spring-logging","source":"@site/blog/2022-06-19-springlogging.md","title":"Cara Mudah Membuat Logging di Spring Boot","description":"Logging sangat berguna untuk memberikan informasi jalannya program kepada programmer, atau untuk menganalisa baik masih dalam proses debug developer maupun log ketika sudah dalam production.","date":"2022-06-19T00:00:00.000Z","formattedDate":"June 19, 2022","tags":[{"label":"spring","permalink":"/blog/tags/spring"},{"label":"springboot","permalink":"/blog/tags/springboot"},{"label":"logging","permalink":"/blog/tags/logging"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"spring-logging","title":"Cara Mudah Membuat Logging di Spring Boot","authors":"topekox","tags":["spring","springboot","logging"]},"nextItem":{"title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration (Bundle Tomcat)","permalink":"/blog/spring-mvc-maven-xml"}},"content":"Logging sangat berguna untuk memberikan informasi jalannya program kepada programmer, atau untuk menganalisa baik masih dalam proses debug developer maupun log ketika sudah dalam production. \\n\\n\x3c!--truncate--\x3e\\n\\n![Topekox](https://images.unsplash.com/photo-1581090587512-8bfdd1119f94?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80)\\n\\nDi Java ada banyak framework untuk logging, namun yang paling gampang menggunakan Sl4j yang sudah dibundle dalam library [Lombok](https://projectlombok.org/).\\n\\n## Menggunakan Logging Slf4j\\n\\nSecara default aplikasi spring boot bisa langsung menggunakan Slf4j, maka kita tinggal memasukan annotation `@Slf4j` ke dalam class kita, contoh:\\n\\n```java\\npackage com.topekox.demojunit;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\\n// inject annotation Slf4j\\n@Slf4j\\npublic class DemoUtilsTest {\\n\\n}\\n```\\n\\nUntuk menggunakannya tinggal di panggil `log`.\\n\\n```java\\nlog.info(\\"Pesan Info\\");\\nlog.warning(\\"Pesan Warning\\");\\nlog.error(\\"Pesan Error\\");\\n```\\n\\n## Konfigurasi Spring Boot\\n\\nKita juga bisa menambahkan konfigurasi tambahan, contoh kita ingin menyimpan log ke dalam file, update `application.properties` milik spring boot lalu tambahkan baris di bawah ini:\\n\\n```properties\\n# Menyimpan print out log ke dalam file \'application.log\' yang berada di direktori \'log\'\\nlogging.file.name=log/application.log\\n```"},{"id":"spring-mvc-maven-xml","metadata":{"permalink":"/blog/spring-mvc-maven-xml","source":"@site/blog/2022-06-16-spring-mvc-maven/index.md","title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration (Bundle Tomcat)","description":"Pada artikel sebelumnya (Membuat Project Spring MVC di Eclipse), saya sudah membagikan cara membuat project Spring MVC dengan menggunakan Eclipse IDE. Pada tutorial kali ini kita akan mencoba untuk membuat project Spring MVC menggunakan Maven.","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"java","permalink":"/blog/tags/java"},{"label":"spring","permalink":"/blog/tags/spring"},{"label":"spring mvc","permalink":"/blog/tags/spring-mvc"},{"label":"eclipse","permalink":"/blog/tags/eclipse"}],"readingTime":3.665,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"spring-mvc-maven-xml","title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration (Bundle Tomcat)","authors":"topekox","tags":["java","spring","spring mvc","eclipse"]},"prevItem":{"title":"Cara Mudah Membuat Logging di Spring Boot","permalink":"/blog/spring-logging"},"nextItem":{"title":"Membuat Service Android (Background & Foreground)","permalink":"/blog/service-android"}},"content":"Pada artikel sebelumnya ([Membuat Project Spring MVC di Eclipse](/blog/spring-mvc-eclipse)), saya sudah membagikan cara membuat project Spring MVC dengan menggunakan Eclipse IDE. Pada tutorial kali ini kita akan mencoba untuk membuat project Spring MVC menggunakan Maven.\\n\\n\x3c!--truncate--\x3e\\n\\n![https://unsplash.com/photos/VcpMPsf_Ex0](https://images.unsplash.com/photo-1518043610038-064362b44076?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80)\\n\\nSebelumnya apa itu [Maven](https://maven.apache.org/)? jadi maven itu secara umum bisa digambarkan sebagai project manajemen, jadi nantinya project kita akan menggunakan standard dari maven, dan semua dependency/library yang dibutuhkan dalam project kita sudah dihandle oleh maven. Kalo di bahasa pemrograman lain, maven sepadan dengan npm di NodeJS atau composer di PHP.\\n\\nSalah satu kelebihan maven adalah, project yang dibuat dengan maven dapat dijalankan di berbagai IDE atau Text Editor.\\n\\n## Teknologi yang digunakan\\n\\n* Apache Maven 3.8.5\\n* JDK 17\\n* Text Editor VS Code\\n* Apache Tomcat 9\\n* Springframework 5\\n\\n:::tip\\nCara Install Maven di sini: [https://maven.apache.org/install.html](https://maven.apache.org/install.html).\\n:::\\n\\n## Konfigurasi Project\\n\\n* Pastikan maven sudah terinstall di komputer teman-teman buka, terminal jalankan perintah di bawah ini untuk membuat project baru misalnya dengan nama `SpringMVCMaven`:\\n\\n```bash\\nmvn archetype:generate -DgroupId=com.tutorialtimposu -DartifactId=SpringMVCMaven -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\\n```\\n\\n* Buka Project baru dengan menggunakan editor pilihan teman-teman misal disini saya menggunakan VSCode.\\n\\nBuka file `pom.xml` masukan dependency, dan ganti packaging-nya menjadi `war` karena kita akan membuat web java seperti di bawah ini:\\n\\n```xml title=pom.xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n  <modelVersion>4.0.0</modelVersion>\\n\\n  <groupId>com.tutorialtimposu</groupId>\\n  <artifactId>SpringMVCMaven</artifactId>\\n  <version>1.0-SNAPSHOT</version>\\n  <packaging>war</packaging>\\n\\n  <name>SpringMVCMaven</name>\\n  <url>http://www.tutorialtimposu.com</url>\\n\\n  <properties>\\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\\n    <maven.compiler.source>17</maven.compiler.source>\\n    <maven.compiler.target>17</maven.compiler.target>\\n    <spring.version>5.3.21</spring.version>\\n  </properties>\\n\\n  <dependencies>\\n    <dependency>\\n      <groupId>org.springframework</groupId>\\n      <artifactId>spring-context</artifactId>\\n      <version>${spring.version}</version>\\n    </dependency>\\n    <dependency>\\n      <groupId>org.springframework</groupId>\\n      <artifactId>spring-webmvc</artifactId>\\n      <version>${spring.version}</version>\\n    </dependency>\\n    <dependency>\\n      <groupId>org.springframework</groupId>\\n      <artifactId>spring-web</artifactId>\\n      <version>${spring.version}</version>\\n    </dependency>\\n    <dependency>\\n      <groupId>javax.servlet</groupId>\\n      <artifactId>jstl</artifactId>\\n      <version>1.2</version>\\n    </dependency>\\n    <dependency>\\n      <groupId>javax.servlet.jsp.jstl</groupId>\\n      <artifactId>jstl-api</artifactId>\\n      <version>1.2</version>\\n    </dependency>\\n\\n    <dependency>\\n      <groupId>junit</groupId>\\n      <artifactId>junit</artifactId>\\n      <version>4.11</version>\\n      <scope>test</scope>\\n    </dependency>\\n  </dependencies>\\n\\n  <build>\\n    <pluginManagement>\\n      \x3c!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --\x3e\\n      <plugins>\\n        \x3c!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --\x3e\\n        <plugin>\\n          <artifactId>maven-clean-plugin</artifactId>\\n          <version>3.1.0</version>\\n        </plugin>\\n        \x3c!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --\x3e\\n        <plugin>\\n          <artifactId>maven-resources-plugin</artifactId>\\n          <version>3.0.2</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-compiler-plugin</artifactId>\\n          <version>3.8.0</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-surefire-plugin</artifactId>\\n          <version>2.22.1</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-war-plugin</artifactId>\\n          <version>3.2.3</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-install-plugin</artifactId>\\n          <version>2.5.2</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-deploy-plugin</artifactId>\\n          <version>2.8.2</version>\\n        </plugin>\\n        \x3c!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --\x3e\\n        <plugin>\\n          <artifactId>maven-site-plugin</artifactId>\\n          <version>3.7.1</version>\\n        </plugin>\\n        <plugin>\\n          <artifactId>maven-project-info-reports-plugin</artifactId>\\n          <version>3.0.0</version>\\n        </plugin>\\n      </plugins>\\n    </pluginManagement>\\n  </build>\\n</project>\\n```\\n\\n* Buat struktur direktori web maven Spring MVC dengan membuat file `web.xml` dan file konfigurasi Spring MVC seperti gambar dibawah ini:\\n\\n![struktur-direktory](1.png)\\n\\n* Isi `web.xml`\\n\\n```xml title=web.xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<web-app xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n    xmlns=\\"http://xmlns.jcp.org/xml/ns/javaee\\"\\n    xsi:schemaLocation=\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\\"\\n    id=\\"WebApp_ID\\" version=\\"3.1\\">\\n    <display-name>DemoSpringMVCMaven</display-name>\\n    \x3c!-- Spring MVC Configs --\x3e\\n\\n    \x3c!-- Step 1: Configure Spring MVC Dispatcher Servlet --\x3e\\n    <servlet>\\n        <servlet-name>dispatcher</servlet-name>\\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\\n        <init-param>\\n            <param-name>contextConfigLocation</param-name>\\n            <param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>\\n        </init-param>\\n        <load-on-startup>1</load-on-startup>\\n    </servlet>\\n\\n    \x3c!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet --\x3e\\n    <servlet-mapping>\\n        <servlet-name>dispatcher</servlet-name>\\n        <url-pattern>/</url-pattern>\\n    </servlet-mapping>\\n</web-app>\\n```\\n\\n* Isi dari `/WEB-INF/spring-mvc-demo-servlet.xml`, dengan menempatkan semua file web jsp kita berada di direktori `/WEB-INF/view/`:\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<beans xmlns=\\"http://www.springframework.org/schema/beans\\"\\n\\txmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n\\txmlns:context=\\"http://www.springframework.org/schema/context\\"\\n\\txmlns:mvc=\\"http://www.springframework.org/schema/mvc\\"\\n\\txsi:schemaLocation=\\"\\n\\t\\thttp://www.springframework.org/schema/beans\\n    \\thttp://www.springframework.org/schema/beans/spring-beans.xsd\\n    \\thttp://www.springframework.org/schema/context\\n    \\thttp://www.springframework.org/schema/context/spring-context.xsd\\n    \\thttp://www.springframework.org/schema/mvc\\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\\">\\n\\n\\t\x3c!-- Step 3: Add support for component scanning --\x3e\\n\\t<context:component-scan\\n\\t\\tbase-package=\\"com.tutorialtimposu\\" />\\n\\n\\t\x3c!-- Step 4: Add support for conversion, formatting and validation support --\x3e\\n\\t<mvc:annotation-driven />\\n\\n\\t\x3c!-- Step 5: Define Spring MVC view resolver --\x3e\\n\\t<bean\\n\\t\\tclass=\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\">\\n\\t\\t<property name=\\"prefix\\" value=\\"/WEB-INF/view/\\" />\\n\\t\\t<property name=\\"suffix\\" value=\\".jsp\\" />\\n\\t</bean>\\n\\t\\n</beans>\\n```\\n\\n* Install dependency dengan perintah\\n\\n```\\nmvn install\\n```\\n\\n## Buat Controller\\n\\n* Buat class baru dengan nama `HelloController.java` di dalam package `com.tutorialtimposu.controller`, class ini akan meload file jsp dengan nama `hello.jsp`:\\n\\n```java title=HelloController.java\\npackage com.tutorialtimposu.controller;\\n\\nimport org.springframework.stereotype.Controller;\\nimport org.springframework.ui.Model;\\nimport org.springframework.web.bind.annotation.GetMapping;\\n\\n@Controller\\npublic class HelloController {\\n    \\n    @GetMapping(\\"/\\")\\n    public String sayHello(Model model) {\\n        model.addAttribute(\\"name\\", \\"Ucup\\");\\n        return \\"hello\\";\\n    }\\n}\\n```\\n\\n* Buat file `hello.jsp`:\\n\\n```html title=hello.jsp\\n<%@ page language=\\"java\\" contentType=\\"text/html; charset=UTF-8\\"\\n    pageEncoding=\\"UTF-8\\"%>\\n<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\"UTF-8\\">\\n<title>Demo Spring MVC</title>\\n</head>\\n<body>\\n    <h2>Hello ${name}</h2>\\n</body>\\n</html>\\n```\\n\\n## Bundle Tomcat dengan Cargo\\n\\nPermasalahnnya adalah kita belum mempunyai server yang bundle, berbeda kalau kita menggunakan IDE seperti Eclipse atau IntelijIDEA Ultimate, server sudah dibundle di dalam IDE nya. Solusinya adalah kita membundle plugin Cargo ke dalam maven `pom.xml`. Nantinya si Cargo akan mendownloadkan Tomcat untuk kita:\\n\\n```xml title=pom.xml\\n...\\n<plugin>\\n  <groupId>org.codehaus.cargo</groupId>\\n  <artifactId>cargo-maven3-plugin</artifactId>\\n  <version>1.9.10</version>\\n  <configuration>\\n    <container>\\n      <containerId>tomcat9x</containerId>\\n      <zipUrlInstaller>\\n        <url>https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/9.0.62/tomcat-9.0.62.zip</url>\\n      </zipUrlInstaller>\\n    </container>\\n  </configuration>\\n</plugin>\\n...\\n```\\n\\nSelanjutnya jalankan perintah di bawah ini untuk menjalankan:\\n\\n```bash\\nmvn clean package\\n\\nmvn cargo:run\\n```\\n\\nSetiap ada perubahan jalankan kedua perintah di atas.\\n\\n```bash\\n...\\n[INFO] [talledLocalContainer] Jun 16, 2022 8:39:44 PM org.apache.coyote.AbstractProtocol start\\n[INFO] [talledLocalContainer] INFO: Starting ProtocolHandler [\\"http-nio-8080\\"]\\n[INFO] [talledLocalContainer] Jun 16, 2022 8:39:44 PM org.apache.catalina.startup.Catalina start\\n[INFO] [talledLocalContainer] INFO: Server startup in [5461] milliseconds\\n[INFO] [talledLocalContainer] Tomcat 9.x started on port [8080]\\n[INFO] Press Ctrl-C to stop the container...\\n```\\n\\n![run](2.png)\\n\\n:::info\\n[Source Code](https://github.com/TutorialTimposu/tutorial-spring-from-blog/tree/main/SpringMVCMaven)\\n:::"},{"id":"service-android","metadata":{"permalink":"/blog/service-android","source":"@site/blog/2022-06-13-service-android/index.md","title":"Membuat Service Android (Background & Foreground)","description":"Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class IntentService. Namun, sayangnya class IntentService sudah di-deprecated. Tapi kita masih bisa menggunakan class Service secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service.","date":"2022-06-13T00:00:00.000Z","formattedDate":"June 13, 2022","tags":[{"label":"android","permalink":"/blog/tags/android"},{"label":"android-java","permalink":"/blog/tags/android-java"}],"readingTime":4.075,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"service-android","title":"Membuat Service Android (Background & Foreground)","authors":"topekox","tags":["android","android-java"]},"prevItem":{"title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration (Bundle Tomcat)","permalink":"/blog/spring-mvc-maven-xml"},"nextItem":{"title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","permalink":"/blog/menggunakan-scheduled-spring-boot"}},"content":"Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class `IntentService`. Namun, sayangnya class `IntentService` sudah di-deprecated. Tapi kita masih bisa menggunakan class `Service` secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service.\\n\\n\x3c!--truncate--\x3e\\n\\n![Android](https://images.unsplash.com/photo-1587840178393-079769787b40?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80)\\n\\n## Background Service\\n\\nBackground Service digunakan untuk menjalankan Service di background, namun service ini akan mati ketika aplikasi kita dimatikan.\\n\\nCara membuatnya, yaitu buat sebuah class extends `Service` disini saya beri nama `MyBackgroundService.java` dan override method `onStartCommand`, dan buat `Thread` baru di dalam method tersebut.\\n\\n```java title=MyBackgroundService.java\\npackage com.topekox.demoservice;\\n\\nimport android.app.Service;\\nimport android.content.Intent;\\nimport android.os.IBinder;\\nimport android.util.Log;\\n\\nimport androidx.annotation.Nullable;\\n\\npublic class MyBackgroundService extends Service {\\n\\n    @Override\\n    public int onStartCommand(Intent intent, int flags, int startId) {\\n        new Thread(new Runnable() {\\n            @Override\\n            public void run() {\\n                while (true) {\\n                    Log.e(\\"SERVICE\\", \\"Service is running...\\");\\n                    try {\\n                        Thread.sleep(2000);\\n                    } catch (InterruptedException e) {\\n                        e.printStackTrace();\\n                    }\\n                }\\n            }\\n        }).start();\\n        return super.onStartCommand(intent, flags, startId);\\n    }\\n\\n    @Nullable\\n    @Override\\n    public IBinder onBind(Intent intent) {\\n        return null;\\n    }\\n}\\n```\\n\\nPada class di atas kita membuat Thread di dalam service yang akan di eksekusi setiap interval 2 detik. Selanjutnya daftarkan class Service tersebut ke dalam `AndroidManifest.xml`:\\n\\n```xml\\n<service android:name=\\".MyBackgroundService\\"></service>\\n```\\n\\nKode lengkap `AndroidManifest.xml`:\\n\\n```xml title=AndroidManifest.xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    package=\\"com.topekox.demoservice\\">\\n\\n    <application\\n        android:allowBackup=\\"true\\"\\n        android:dataExtractionRules=\\"@xml/data_extraction_rules\\"\\n        android:fullBackupContent=\\"@xml/backup_rules\\"\\n        android:icon=\\"@mipmap/ic_launcher\\"\\n        android:label=\\"@string/app_name\\"\\n        android:roundIcon=\\"@mipmap/ic_launcher_round\\"\\n        android:supportsRtl=\\"true\\"\\n        android:theme=\\"@style/Theme.DemoService\\"\\n        tools:targetApi=\\"31\\">\\n        <activity\\n            android:name=\\".MainActivity\\"\\n            android:exported=\\"true\\">\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\n\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\n            </intent-filter>\\n        </activity>\\n        \x3c!-- Menambahkan Service --\x3e\\n        <service android:name=\\".MyBackgroundService\\"></service>\\n    </application>\\n\\n</manifest>\\n```\\n\\nPanggil Service dari class Activity, contoh dipanggil dari class `MainActivity`:\\n\\n```java\\nIntent intentService = new Intent(this, MyBackgroundService.class);\\nstartService(intentService);\\n```\\n\\nGambar log ketika aplikasi dijalankan.\\n\\n![log](1.png)\\n\\nService akan berhenti ketika aplikasi dimatikan.\\n\\n## Foreground Service\\n\\nBerbeda dengan Background Service, Foreground Service akan tetap berjalan meski aplikasi dimatikan.\\n\\nCara membuatnya hampir sama dengan cara sebelumnya hanya pada bagian class `MainActivity` yang berbeda.\\n\\nBuat class extends `Service` disini saya beri nama `MyForegroundService.java` dan override method `onStartCommand`, dan buat `Thread` baru di dalam method tersebut.\\n\\n```java title=MyForegroundService.java\\npackage com.topekox.demoservice;\\n\\nimport android.app.Notification;\\nimport android.app.NotificationChannel;\\nimport android.app.NotificationManager;\\nimport android.app.Service;\\nimport android.content.Intent;\\nimport android.os.Build;\\nimport android.os.IBinder;\\nimport android.util.Log;\\n\\nimport androidx.annotation.Nullable;\\nimport androidx.annotation.RequiresApi;\\n\\npublic class MyForegroundService extends Service {\\n\\n    @RequiresApi(api = Build.VERSION_CODES.O)\\n    @Override\\n    public int onStartCommand(Intent intent, int flags, int startId) {\\n        new Thread(new Runnable() {\\n            @Override\\n            public void run() {\\n                while (true) {\\n                    Log.e(\\"SERVICE\\", \\"Service is running...\\");\\n                    try {\\n                        Thread.sleep(2000);\\n                    } catch (InterruptedException e) {\\n                        e.printStackTrace();\\n                    }\\n                }\\n            }\\n        }).start();\\n\\n        return super.onStartCommand(intent, flags, startId);\\n    }\\n\\n    @Nullable\\n    @Override\\n    public IBinder onBind(Intent intent) {\\n        return null;\\n    }\\n}\\n```\\n\\nDaftar service dan permission `FOREGROUND_SERVICE` ke `AndroidManifest.xml`:\\n\\n```xml title=AndroidManifest.xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    package=\\"com.topekox.demoservice\\">\\n    \x3c!-- add permission --\x3e\\n    <uses-permission android:name=\\"android.permission.FOREGROUND_SERVICE\\"></uses-permission>\\n\\n    <application\\n        ...\\n        <activity\\n           ...\\n        </activity>\\n        \x3c!-- register service --\x3e\\n        <service android:name=\\".MyForegroundService\\"></service>\\n        ...\\n    </application>\\n\\n</manifest>\\n```\\n\\nPanggil service di `MainActivity`, cuma disini sedikit berbeda karena di versi Android yang saya jalankan, saya harus memanggil annotation `@RequiresApi(api = Build.VERSION_CODES.O)` untuk masalah kompatibelitas, kurang lebih method `onCreate` seperti di bawah ini:\\n\\n```java\\n@RequiresApi(api = Build.VERSION_CODES.O)\\n@Override\\nprotected void onCreate(Bundle savedInstanceState) {\\n    super.onCreate(savedInstanceState);\\n    setContentView(R.layout.activity_main);\\n\\n    Intent intentService = new Intent(this, MyForegroundService.class);\\n    \\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\\n        startForegroundService(intentService);\\n    } else {\\n        MainActivity.this.startService(intentService);\\n    }        \\n}\\n```\\n\\n:::tip\\nBaca dokumentasi lengkap Foreground Service [di sini](https://developer.android.com/guide/components/foreground-services).\\n:::\\n\\n### Menambahkan Notifikasi\\n\\nUntuk menambahkan notifikasi `NotificationChannel` pada method `onStartCommand` di class ForegroundService:\\n\\n```java title=MyForegroundService.java\\n@RequiresApi(api = Build.VERSION_CODES.O)\\n@Override\\npublic int onStartCommand(Intent intent, int flags, int startId) {\\n    new Thread(new Runnable() {\\n        @Override\\n        public void run() {\\n            while (true) {\\n                Log.e(\\"SERVICE\\", \\"Service is running...\\");\\n                try {\\n                    Thread.sleep(2000);\\n                } catch (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        }\\n    }).start();\\n\\n    final String CHANNEL_ID = \\"Foreground Channel ID\\";\\n    NotificationChannel channel = new NotificationChannel(\\n            CHANNEL_ID,\\n            CHANNEL_ID,\\n            NotificationManager.IMPORTANCE_LOW);\\n\\n    getSystemService(NotificationManager.class).createNotificationChannel(channel);\\n    Notification.Builder notification = new Notification.Builder(this, CHANNEL_ID)\\n            .setContentText(\\"Service is running\\")\\n            .setContentTitle(\\"Service Enabled\\")\\n            .setSmallIcon(R.drawable.ic_launcher_background);\\n\\n    startForeground(1001, notification.build());\\n\\n    return super.onStartCommand(intent, flags, startId);\\n}\\n```\\n\\nKita juga memberikan kondisi agar service hidup jika sebelumnya tidak hidup, tambahkan kondisi di class `MainActivity`:\\n\\n```java title=MainActivity.java\\n@RequiresApi(api = Build.VERSION_CODES.O)\\n@Override\\nprotected void onCreate(Bundle savedInstanceState) {\\n    super.onCreate(savedInstanceState);\\n    setContentView(R.layout.activity_main);\\n\\n    if (!foregroundServiceIsRunning()) {\\n        Intent intentService = new Intent(this, MyForegroundService.class);\\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\\n            startForegroundService(intentService);\\n        } else {\\n            MainActivity.this.startService(intentService);\\n        }\\n    }\\n}\\n\\nprivate boolean foregroundServiceIsRunning() {\\n    ActivityManager activityManager =\\n            (ActivityManager) getSystemService(MainActivity.this.ACTIVITY_SERVICE);\\n\\n    for (ActivityManager.RunningServiceInfo service :\\n            activityManager.getRunningServices(Integer.MAX_VALUE)) {\\n        if (MyForegroundService.class.getName().equals(service.service.getClassName())) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n```\\n\\nGambar Notifikasi:\\n\\n![notifikasi](2.png)\\n\\n### Service Always ON\\n\\nAgar foreground service tetap berjalan walaupun Android telah direstart, buat sebuah class `BroadcastReceiver` untuk mengandle ini:\\n\\n```java title=MyBroadcastReceiver.java\\npackage com.topekox.demoservice;\\n\\nimport android.content.BroadcastReceiver;\\nimport android.content.Context;\\nimport android.content.Intent;\\nimport android.os.Build;\\n\\nimport androidx.annotation.RequiresApi;\\n\\npublic class MyBroadcastReceiver extends BroadcastReceiver {\\n\\n    @RequiresApi(api = Build.VERSION_CODES.O)\\n    @Override\\n    public void onReceive(Context context, Intent intent) {\\n        if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {\\n            Intent intentService = new Intent(context, MyForegroundService.class);\\n            context.startForegroundService(intentService);\\n        }\\n    }\\n}\\n```\\n\\nLalu tambahkan permission dan register intentnya di `AndroidManifest.xml`:\\n\\n```xml\\n...\\n<uses-permission android:name=\\"android.permission.RECEIVE_BOOT_COMPLETED\\"></uses-permission>\\n...\\n \x3c!-- register receiver --\x3e\\n    <receiver android:name=\\".MyBroadcastReceiver\\"\\n        android:exported=\\"true\\">\\n        <intent-filter>\\n            <action android:name=\\"android.intent.action.BOOT_COMPLETED\\"></action>\\n        </intent-filter>\\n    </receiver>\\n...\\n```\\n\\nMaka service akan tetap berjalan walau Android telah direstart.\\n\\n:::info\\n[Full Source Code](https://github.com/TopekoX/sample-android-java/tree/main/DemoServiceBackgroundForeground).\\n:::"},{"id":"menggunakan-scheduled-spring-boot","metadata":{"permalink":"/blog/menggunakan-scheduled-spring-boot","source":"@site/blog/2022-06-10-spring-boot-scheduled.md","title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","description":"Dalam satu kasus biasanya kita ingin menjalankan scheduled atau penjadwalan dalam aplikasi kita. Misalnya kita ingin dalam interval waktu tertentu. Contohnya seperti aplikasi SMS Gateway yang akan mengecek dalam interval waktu tertentu akan memeriksa SMS masuk atau SMS keluar.","date":"2022-06-10T00:00:00.000Z","formattedDate":"June 10, 2022","tags":[{"label":"spring","permalink":"/blog/tags/spring"},{"label":"springboot","permalink":"/blog/tags/springboot"}],"readingTime":0.575,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"menggunakan-scheduled-spring-boot","title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","authors":"topekox","tags":["spring","springboot"]},"prevItem":{"title":"Membuat Service Android (Background & Foreground)","permalink":"/blog/service-android"},"nextItem":{"title":"Cara Membuat Project Spring MVC di Eclipse (XML Configuration)","permalink":"/blog/spring-mvc-eclipse"}},"content":"Dalam satu kasus biasanya kita ingin menjalankan scheduled atau penjadwalan dalam aplikasi kita. Misalnya kita ingin dalam interval waktu tertentu. Contohnya seperti aplikasi SMS Gateway yang akan mengecek dalam interval waktu tertentu akan memeriksa SMS masuk atau SMS keluar.\\n\\n\x3c!--truncate--\x3e\\n\\n![Topekox](https://images.unsplash.com/photo-1435527173128-983b87201f4d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1467&q=80)\\n\\nDi Spring Boot, terdapat Annotation `@Scheduled` yang bisa digunakan untuk Scheduled. \\n\\nContoh penggunaan annotation pada method yang ingin diberikan scheduled setiap 5 detik akan dieksekusi menggunakan `@Scheduled` di Spring Boot.\\n\\n```java\\n@Scheduled(fixedDelay = 5000)\\nprivate void sendingProcess() {\\n\\n    // TODO...\\n\\n}\\n```\\n\\nTapi jangan lupa untuk mengaktifkannya dengan annotation `@EnableScheduling` di class main.\\n\\n```java\\n@SpringBootApplication\\n@EnableScheduling // Enabled it\\npublic class PaymentAppBackendApplication {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tSpringApplication.run(PaymentAppBackendApplication.class, args);\\n\\t}\\n}\\n```"},{"id":"spring-mvc-eclipse","metadata":{"permalink":"/blog/spring-mvc-eclipse","source":"@site/blog/2022-05-15-spring-mvc-eclipse/index.md","title":"Cara Membuat Project Spring MVC di Eclipse (XML Configuration)","description":"Eclipse adalah salah satu IDE favorit untuk membuat aplikasi Java, baik itu aplikasi standard maupun untuk skala Enterprise salah satunya membuat project Spring MVC. Salah satu kelebihannya karena lebih ringan dibanding IDE saingannya yaitu Intelij IDEA.","date":"2022-05-15T00:00:00.000Z","formattedDate":"May 15, 2022","tags":[{"label":"spring","permalink":"/blog/tags/spring"},{"label":"spring mvc","permalink":"/blog/tags/spring-mvc"},{"label":"eclipse","permalink":"/blog/tags/eclipse"}],"readingTime":2.735,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"spring-mvc-eclipse","title":"Cara Membuat Project Spring MVC di Eclipse (XML Configuration)","authors":"topekox","tags":["spring","spring mvc","eclipse"]},"prevItem":{"title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","permalink":"/blog/menggunakan-scheduled-spring-boot"},"nextItem":{"title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular (READ Only)","permalink":"/blog/spring-boot-angular"}},"content":"Eclipse adalah salah satu IDE favorit untuk membuat aplikasi Java, baik itu aplikasi standard maupun untuk skala Enterprise salah satunya membuat project Spring MVC. Salah satu kelebihannya karena lebih ringan dibanding IDE saingannya yaitu Intelij IDEA.\\n\\n\x3c!--truncate--\x3e\\n\\nAkan tetapi membuat project Spring MVC mungkin sedikit ribet bagi pemula. Ada beberapa konfigurasi yang diperlukan, berikut tutorial membuat aplikasi Spring MVC di Eclipse.\\n\\n## Gunakan Eclipse versi Enterprise Java and Web\\n\\nKetika mendownload Eclipse halaman default pada [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/), Eclipse versi ini berisi package untuk Eclipse for Java Developer yang berisi package standard untuk pemrograman Java Standard. Gunakan yang versi Eclipse Enterprise Java and Web di halaman [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/). Kenapa menggunakan versi Enterpise Java and Web, karena plugin untuk pemrograman web di Java sudah tersedia dalam package versi Eclipse ini.\\n\\n## Buat Project Dynamic Web Project\\n\\nBuka Eclipse dan buat Project Dynamic Web Project.\\n\\n![Spring MVC Eclipse](1.png)\\n\\nKemudian sesuaikan Project Name:\\n\\n![Spring MVC Eclipse](2.png)\\n\\nStruktur direktori Dynamic Web Project di Eclipse:\\n\\n![Spring MVC Eclipse](3.png)\\n\\nSelanjutnya kita convert projectnya ke Maven Project. Klik kanan pada project *Configure > Convert to Maven Project*.\\n\\n![Spring MVC Eclipse](4.png)\\n\\nStruktur direktori akan berubah menjadi struktur direktori maven.\\n\\n![Spring MVC Eclipse](5.png)\\n\\n### Konfigurasi pom.xml\\n\\nKita masukan dependency Spring MVC stadard, ubah konfigurasi `pom.xml` seperti di bawah ini:\\n\\n```xml title=pom.xml\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n\\t<modelVersion>4.0.0</modelVersion>\\n\\t<groupId>com.tutorialtimposu</groupId>\\n\\t<artifactId>DemoSpringMVC</artifactId>\\n\\t<version>0.0.1-SNAPSHOT</version>\\n\\t<packaging>war</packaging>\\n\\t<properties>\\n\\t\\t<spring.version>5.3.18</spring.version>\\n\\t</properties>\\n\\n\\t<dependencies>\\n\\t\\t<dependency>\\n\\t\\t\\t<groupId>org.springframework</groupId>\\n\\t\\t\\t<artifactId>spring-context</artifactId>\\n\\t\\t\\t<version>${spring.version}</version>\\n\\t\\t</dependency>\\n\\t\\t<dependency>\\n\\t\\t\\t<groupId>org.springframework</groupId>\\n\\t\\t\\t<artifactId>spring-webmvc</artifactId>\\n\\t\\t\\t<version>${spring.version}</version>\\n\\t\\t</dependency>\\n\\t\\t<dependency>\\n\\t\\t\\t<groupId>org.springframework</groupId>\\n\\t\\t\\t<artifactId>spring-web</artifactId>\\n\\t\\t\\t<version>${spring.version}</version>\\n\\t\\t</dependency>\\n\\t\\t<dependency>\\n\\t\\t\\t<groupId>javax.servlet</groupId>\\n\\t\\t\\t<artifactId>jstl</artifactId>\\n\\t\\t\\t<version>1.2</version>\\n\\t\\t</dependency>\\n\\t\\t<dependency>\\n\\t\\t\\t<groupId>javax.servlet.jsp.jstl</groupId>\\n\\t\\t\\t<artifactId>jstl-api</artifactId>\\n\\t\\t\\t<version>1.2</version>\\n\\t\\t</dependency>\\n\\t</dependencies>\\n\\n\\t<build>\\n\\t\\t<plugins>\\n\\t\\t\\t<plugin>\\n\\t\\t\\t\\t<artifactId>maven-compiler-plugin</artifactId>\\n\\t\\t\\t\\t<version>3.8.1</version>\\n\\t\\t\\t\\t<configuration>\\n\\t\\t\\t\\t\\t<source>17</source>\\n\\t\\t\\t\\t\\t<target>17</target>\\n\\t\\t\\t\\t</configuration>\\n\\t\\t\\t</plugin>\\n\\t\\t\\t<plugin>\\n\\t\\t\\t\\t<artifactId>maven-war-plugin</artifactId>\\n\\t\\t\\t\\t<version>3.2.3</version>\\n\\t\\t\\t</plugin>\\n\\t\\t</plugins>\\n\\t</build>\\n</project>\\n```\\n\\n### Konfigurasi web.xml\\n\\nMasukan konfigurasi `web.xml` pada direktor `/WEB-INF/web.xml` seperti di bawah ini:\\n\\n```xml title=web.xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<web-app xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n\\txmlns=\\"http://xmlns.jcp.org/xml/ns/javaee\\"\\n\\txsi:schemaLocation=\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\\"\\n\\tid=\\"WebApp_ID\\" version=\\"3.1\\">\\n\\t<display-name>DemoSpringMVC</display-name>\\n\\t\x3c!-- Spring MVC Configs --\x3e\\n\\n\\t\x3c!-- Step 1: Configure Spring MVC Dispatcher Servlet --\x3e\\n\\t<servlet>\\n\\t\\t<servlet-name>dispatcher</servlet-name>\\n\\t\\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\\n\\t\\t<init-param>\\n\\t\\t\\t<param-name>contextConfigLocation</param-name>\\n\\t\\t\\t<param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>\\n\\t\\t</init-param>\\n\\t\\t<load-on-startup>1</load-on-startup>\\n\\t</servlet>\\n\\n\\t\x3c!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet --\x3e\\n\\t<servlet-mapping>\\n\\t\\t<servlet-name>dispatcher</servlet-name>\\n\\t\\t<url-pattern>/</url-pattern>\\n\\t</servlet-mapping>\\n</web-app>\\n```\\n\\nDari konfigurasi di atas kita harus membuat konfigurasi context nya di `/WEB-INF/spring-mvc-demo-servlet.xml`.\\n\\n```xml title=spring-mvc-demo-servlet.xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<beans xmlns=\\"http://www.springframework.org/schema/beans\\"\\n\\txmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n\\txmlns:context=\\"http://www.springframework.org/schema/context\\"\\n\\txmlns:mvc=\\"http://www.springframework.org/schema/mvc\\"\\n\\txsi:schemaLocation=\\"\\n\\t\\thttp://www.springframework.org/schema/beans\\n    \\thttp://www.springframework.org/schema/beans/spring-beans.xsd\\n    \\thttp://www.springframework.org/schema/context\\n    \\thttp://www.springframework.org/schema/context/spring-context.xsd\\n    \\thttp://www.springframework.org/schema/mvc\\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\\">\\n\\n\\t\x3c!-- Step 3: Add support for component scanning --\x3e\\n\\t<context:component-scan\\n\\t\\tbase-package=\\"com.topekox.mvc\\" />\\n\\n\\t\x3c!-- Step 4: Add support for conversion, formatting and validation support --\x3e\\n\\t<mvc:annotation-driven />\\n\\n\\t\x3c!-- Step 5: Define Spring MVC view resolver --\x3e\\n\\t<bean\\n\\t\\tclass=\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\">\\n\\t\\t<property name=\\"prefix\\" value=\\"/WEB-INF/view/\\" />\\n\\t\\t<property name=\\"suffix\\" value=\\".jsp\\" />\\n\\t</bean>\\n\\t\\n</beans>\\n```\\nSesuaikan base package component nya disini saya buat `com.topekox.mvc` dan untuk bagian view nya saya buat di `/WEB-INF/view/` dengan ekstensi `jsp`.\\n\\n### Buat Controller\\n\\nSelanjutnya kita buat controller, tapi sebelumnya kita buat package `com.topekox.mvc`:\\n\\n```java title=HomeController.java\\npackage com.topekox.mvc;\\n\\nimport org.springframework.stereotype.Controller;\\nimport org.springframework.ui.Model;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\n\\n@Controller\\npublic class HomeController {\\n\\t\\n\\t@RequestMapping(name = \\"/\\")\\n\\tpublic String home(Model model) {\\n\\t\\t\\n\\t\\tmodel.addAttribute(\\"name\\", \\"Ucup\\");\\n\\t\\treturn \\"home\\";\\n\\t}\\n\\n}\\n```\\n\\n### Buat View\\n\\nBuat file `home.jsp` di direktori `/WEB-INF/view/home.jsp`:\\n\\n```html title=home.jsp\\n<%@ page language=\\"java\\" contentType=\\"text/html; charset=UTF-8\\"\\n    pageEncoding=\\"UTF-8\\"%>\\n<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\"UTF-8\\">\\n<title>Demo Spring MVC</title>\\n</head>\\n<body>\\n\\t<h2>Hello ${name}</h2>\\n</body>\\n</html>\\n```\\n\\n### Running\\n\\nReview struktur direktori:\\n\\n![Spring MVC Eclipse](6.png)\\n\\nRunning dengan Tomcat klik kanan pada project *Run As > Run on Server* kemudian pilih server tomcat server anda kemudian lihat di browser:\\n\\n![Spring MVC Eclipse](7.png)\\n\\n:::info\\n[Source Code](https://github.com/TutorialTimposu/tutorial-spring-from-blog/tree/main/SpringMVCEclipse)\\n:::"},{"id":"spring-boot-angular","metadata":{"permalink":"/blog/spring-boot-angular","source":"@site/blog/2022-05-07-spring-boot-angular/index.md","title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular (READ Only)","description":"Pada seri tutorial ini kita akan membangun aplikasi Fullstack Spring Boot sebagai backend dan Angular sebagai frontend. Fullstack developer secara garis besar adalah seseorang yang bekerja atau merangkap tugas sebagai back end dan front end developer. Lebih spesifiknya, developer bisa bekerja dengan aplikasi backend seperti Javascript, PHP, Go, Java, Database (backend) dan juga bisa mengkonversi desain ke dalam kode pemrograman seperti HTML, CSS, XML, JSON (frontend).","date":"2022-05-07T00:00:00.000Z","formattedDate":"May 7, 2022","tags":[{"label":"spring","permalink":"/blog/tags/spring"},{"label":"spring boot","permalink":"/blog/tags/spring-boot"},{"label":"angular","permalink":"/blog/tags/angular"}],"readingTime":6.99,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"spring-boot-angular","title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular (READ Only)","authors":"topekox","tags":["spring","spring boot","angular"]},"prevItem":{"title":"Cara Membuat Project Spring MVC di Eclipse (XML Configuration)","permalink":"/blog/spring-mvc-eclipse"},"nextItem":{"title":"Daftar Repository Lokal Ubuntu 22.04","permalink":"/blog/repo-lokal-ubuntu-22-04"}},"content":"Pada seri tutorial ini kita akan membangun aplikasi *Fullstack* Spring Boot sebagai *backend* dan Angular sebagai *frontend*. Fullstack developer secara garis besar adalah seseorang yang bekerja atau merangkap tugas sebagai back end dan front end developer. Lebih spesifiknya, developer bisa bekerja dengan aplikasi backend seperti Javascript, PHP, Go, Java, Database (backend) dan juga bisa mengkonversi desain ke dalam kode pemrograman seperti HTML, CSS, XML, JSON (frontend).\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\nAplikasi yang akan dibuat hanya untuk menampilkan data READ ONLY, aplikasi ini tidak mendukung Create, Update dan Delete.\\n:::\\n\\n## Teknologi Yang Digunakan\\n\\nAdapun teknologi yang digunakan adalah:\\n\\n1. Spring Boot (backend)\\n2. Angular (frontend)\\n3. MySQL (database)\\n\\n## Pengetahuan yang dibutuhkan\\n\\n* Java Basic\\n* Spring Framework Basic\\n* Angular dasar\\n* Typescript & Javascript dasar\\n* HTML & CSS / Bootstrap\\n\\n## Tools yang digunakan\\n\\nAdapun tools yang digunakan pada tutorial ini:\\n\\n* [OpenJDK 17](https://jdk.java.net/archive/)\\n* [Node Js & npm](https://nodejs.org/en/download/)\\n* Angular 13\\n* [Maven 3.8](https://maven.apache.org/download.cgi)\\n* [MySQL Database](https://www.mysql.com/downloads/)\\n\\nUntuk IDE nya saya menggunakan (bisa menggunakan IDE lain sesuai selera):\\n* Intellij IDEA Community - untuk coding Spring Boot\\n* VS Code - untuk coding Angular\\n\\n## Proses Development\\n\\nAdapun step-by-step proses development:\\n\\n1. Menyiapkan Database\\n2. Membuat Aplikasi Spring Boot untuk Backend\\n\\t* Membuat Entity\\n\\t* Membuat Repository Data Access Object.\\n\\t* Menampilkan data REST.\\n3. Membuat Aplikasi Angular untuk Frontend\\n\\t* Membuat model.\\n\\t* Membuat component.\\n\\t* Membuat service.\\n\\n## Arsitektur Aplikasi\\n\\nGambaran umum desain arsitektur aplikasi yang akan kita buat:\\n\\n![spring boot angular architecture diagram](spring_angular_diagram.png)\\n\\n## Konfigurasi MySQL\\n\\nDisini saya akan membuat database dengan nama `belajar`:\\n\\n```sql\\nCREATE DATABASE belajar;\\n\\nUSE belajar;\\n```\\n\\nKemudian dalam praktek ini kita akan menyiapkan database dengan tabel `person` dan `city` yang akan berelasi one-to-many antara 2 tabel, dengan rancangan relasi seperti gambar di bawah ini.\\n\\n![database relation](db.png)\\n\\nUntuk datanya tidak usah khawatir, saya sudah menyiapkan file dump `sql` nya\\n\\nUntuk tabel `city` :\\n\\n```sql title=\\"Tabel City\\"\\nDROP TABLE IF EXISTS `city`;\\nCREATE TABLE `city` (\\n  `id` int NOT NULL AUTO_INCREMENT,\\n  `city_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\\n  PRIMARY KEY (`id`),\\n  KEY `course_id_IDX` (`id`) USING BTREE\\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\\n\\nLOCK TABLES `city` WRITE;\\n\\nINSERT INTO `city` VALUES (1,\'Jakarta\'),(2,\'Makassar\'),(3,\'Medan\'),(4,\'Surabaya\'),(5,\'Ambon\');\\n\\nUNLOCK TABLES;\\n```\\n\\nUntuk tabel `person` dengan 50 record data:\\n\\n```sql title=\\"Tabel Person\\"\\nDROP TABLE IF EXISTS `person`;\\n\\nCREATE TABLE `person` (\\n  `id` int NOT NULL AUTO_INCREMENT,\\n  `first_name` varchar(100) DEFAULT NULL,\\n  `last_name` varchar(100) DEFAULT NULL,\\n  `email` varchar(100) DEFAULT NULL,\\n  `id_city` int DEFAULT NULL,\\n  PRIMARY KEY (`id`),\\n  KEY `person_FK` (`id_city`),\\n  CONSTRAINT `person_FK` FOREIGN KEY (`id_city`) REFERENCES `city` (`id`)\\n) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\\n\\nLOCK TABLES `person` WRITE;\\n\\nINSERT INTO `person` VALUES (1,\'david\',\'john\',\'david@gmail.com\',1),(2,\'rogers\',\'paul\',\'rogerds@gmail.com\',1),(3,\'maria\',\'sanders\',\'maria@gmail.com\',1),(4,\'morris\',\'miller\',\'morris@gmail.com\',1),(5,\'azwar\',\'anas\',\'azwar@gmail.com\',1),(6,\'daniel\',\'michael\',\'daniel01@gmail.com\',1),(7,\'sanders\',\'paul\',\'sanders45@gmail.com\',1),(8,\'mark\',\'mike\',\'mark55@gmail.com\',1),(9,\'morgan\',\'maria\',\'morgan22@gmail.com\',2),(10,\'paul\',\'miller\',\'paul45@gmail.com\',2),(11,\'david\',\'miller\',\'david33@gmail.com\',2),(12,\'chrishaydon\',\'bell\',\'chrishaydon22@gmail.com\',2),(13,\'michael\',\'brown\',\'112michael@gmail.com\',2),(14,\'morgan\',\'james\',\'222morgan@gmail.com\',2),(15,\'rogers\',\'chrishaydon\',\'rogers34@gmail.com\',2),(16,\'morgan\',\'wright\',\'morgan2232@gmail.com\',2),(17,\'morgan\',\'wright\',\'morgan22223@gmail.com\',2),(18,\'david\',\'ross\',\'david222@gmail.com\',2),(19,\'maria\',\'morgan\',\'maria434@gmail.com\',2),(20,\'mike\',\'bell\',\'mike66@gmail.com\',2),(21,\'miller\',\'michael\',\'miller232@gmail.com\',3),(22,\'ross\',\'rogers\',\'ross56@gmail.com\',3),(23,\'brooks\',\'mike\',\'brooks232@gmail.com\',3),(24,\'miller\',\'daniel\',\'miller444@gmail.com\',3),(25,\'mike\',\'wright\',\'mike333@gmail.com\',3),(26,\'wright\',\'smith\',\'wright3242@gmail.com\',3),(27,\'david\',\'morgan\',\'david111@gmail.com\',3),(28,\'smith\',\'bell\',\'smith66868@gmail.com\',3),(29,\'paul\',\'wright\',\'paul456464@gmail.com\',3),(30,\'michael\',\'james\',\'michael6868@gmail.com\',3),(31,\'michael\',\'sanders\',\'michael55765@gmail.com\',4),(32,\'john\',\'rivera\',\'johnrrr44@gmail.com\',4),(33,\'paul\',\'michael\',\'paul33553@gmail.com\',4),(34,\'ross\',\'mark\',\'ross87989@gmail.com\',4),(35,\'brooks\',\'smith\',\'brooks223322@gmail.com\',4),(36,\'cooper\',\'brown\',\'cooper90909@gmail.com\',4),(37,\'ross\',\'daniel\',\'ross12121@gmail.com\',4),(38,\'cooper\',\'miller\',\'cooper6767@gmail.com\',4),(39,\'jenny\',\'maria\',\'jenny12121@gmail.com\',4),(40,\'paul\',\'rivera\',\'paul46646@gmail.com\',4),(41,\'maria\',\'sanders\',\'maria131313@gmail.com\',5),(42,\'bell\',\'david\',\'bell21242@gmail.com\',5),(43,\'rivera\',\'cooper\',\'rivera574754@gmail.com\',5),(44,\'mark\',\'david\',\'markwffw24@gmail.com\',5),(45,\'paul\',\'cooper\',\'paul56454@gmail.com\',5),(46,\'brooks\',\'david\',\'brooks53545@gmail.com\',5),(47,\'james\',\'maria\',\'james656@gmail.com\',5),(48,\'john\',\'mark\',\'john6786@gmail.com\',5),(49,\'rivera\',\'jenny09\',\'rivera121212@gmail.com\',5),(50,\'chrishaydon\',\'sanders\',\'chrishaydon21232@gmail.com\',5);\\n\\nUNLOCK TABLES;\\n\\n```\\n\\nCek datanya untuk memastikan datanya sudah ada:\\n\\n```sql\\nSELECT * FROM city;\\n\\nSELECT * FROM person;\\n```\\n\\n## Spring Boot Back End\\n\\nDi artikel kita membuat project Spring Boot yang hanya akan membuat aplikasi dengan studi kasus untuk menampilkan data READ ONLY, aplikasi ini tidak mendukung Create, Update dan Delete.\\n\\nKita akan membuat backend API dengan Spring boot yang akan mengenerate:\\n\\n| Method      | URL                   | Keterangan                          |\\n| ----------- | -----------           | ---                                 |\\n| GET         | `/api/users`            | menampilkan data users            |\\n| GET         | `/api/users/:id`        | menampilkan data user berdasarkan **id** |\\n| GET         | `/api/users/search=:keyword`   | menampilkan data user berdasarkan **keyword** |\\n| GET         | `/api/citys/:id`        | menampilkan data user berdasarkan **id_city** |\\n\\nKita akan memanggil data dari database menggunakan Spring Data REST JPA `JpaRepository`, sehingga kita bisa membuat kodingan kita jauh lebih simpel. \\n\\n### Setup Project\\n\\nBuat Project menggunakan [Spring web tool](https://start.spring.io/) atau melalui IDE (Spring Tool Suite, Eclipse, Intellij) untuk membuat Spring Boot project.\\n\\n### Dependency\\n\\nDependency yang digunakan dalam project ini:\\n\\n* Spring REST Repository\\n* Spring Data JPA\\n* MySQL Driver\\n* Lombok\\n\\nStruktur direktori project:\\n\\n![Struktur Project](struktur-project.png)\\n\\nIsi dependency dalam maven file di `pom.xml`\\n\\n```xml title=pom.xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n  xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n  <modelVersion>4.0.0</modelVersion>\\n  <parent>\\n    <groupId>org.springframework.boot</groupId>\\n    <artifactId>spring-boot-starter-parent</artifactId>\\n    <version>2.6.7</version>\\n    <relativePath/> \x3c!-- lookup parent from repository --\x3e\\n  </parent>\\n  <groupId>com.tutorialtimposu</groupId>\\n  <artifactId>springboot-backend</artifactId>\\n  <version>0.0.1-SNAPSHOT</version>\\n  <name>springboot-backend</name>\\n  <description>Spring Boot Backend</description>\\n  <properties>\\n    <java.version>17</java.version>\\n  </properties>\\n  <dependencies>\\n    <dependency>\\n      <groupId>org.springframework.boot</groupId>\\n      <artifactId>spring-boot-starter-data-rest</artifactId>\\n    </dependency>\\n\\n    <dependency>\\n      <groupId>mysql</groupId>\\n      <artifactId>mysql-connector-java</artifactId>\\n      <scope>runtime</scope>\\n    </dependency>\\n    <dependency>\\n      <groupId>org.projectlombok</groupId>\\n      <artifactId>lombok</artifactId>\\n      <optional>true</optional>\\n    </dependency>\\n    <dependency>\\n      <groupId>org.springframework.boot</groupId>\\n      <artifactId>spring-boot-starter-test</artifactId>\\n      <scope>test</scope>\\n    </dependency>\\n  </dependencies>\\n\\n  <build>\\n    <plugins>\\n      <plugin>\\n        <groupId>org.springframework.boot</groupId>\\n        <artifactId>spring-boot-maven-plugin</artifactId>\\n        <configuration>\\n          <excludes>\\n            <exclude>\\n              <groupId>org.projectlombok</groupId>\\n              <artifactId>lombok</artifactId>\\n            </exclude>\\n          </excludes>\\n        </configuration>\\n      </plugin>\\n    </plugins>\\n  </build>\\n\\n</project>\\n```\\n\\n### Konfigurasi File Properties Spring Datasource, JPA dan Hibernate\\n\\nTambahkan line dibawah ini ke dalam file `application.properties` yang berada di folder `src/main/resources`.\\n\\n```properties title=application.properties\\n# jdbc properties\\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\\nspring.datasource.url=jdbc:mysql://localhost:3306/belajar\\nspring.datasource.username=ucup\\nspring.datasource.password=******\\n\\n# hibernate properties\\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\\n\\n# custom base path url\\nspring.data.rest.base-path=/api\\n```\\n\\nSelain konfigurasi ke database kita juga set base-path urlnya ke `/api`.\\n\\n### Membuat Entity / Model\\n\\nKita akan membuat dua entity ke dalam package `entity` berdasarkan tabel yang telah kita buat yaitu tabel `person` dan `city` .\\n\\n```java title=City.java\\npackage com.tutorialtimposu.backend.entity;\\n\\nimport lombok.Data;\\n\\nimport javax.persistence.*;\\nimport java.util.Set;\\n\\n@Entity\\n@Table(name = \\"city\\")\\n@Data\\npublic class City {\\n\\n    @Id\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\n    @Column(name = \\"id\\")\\n    private Long id;\\n\\n    @Column(name = \\"city_name\\")\\n    private String cityName;\\n\\n    @OneToMany(cascade = {\\n            CascadeType.DETACH,\\n            CascadeType.MERGE,\\n            CascadeType.REFRESH,\\n            CascadeType.PERSIST,\\n    }, mappedBy = \\"city\\")\\n    private Set<Person> person;\\n\\n}\\n```\\n\\n```java title=Person.java\\npackage com.tutorialtimposu.backend.entity;\\n\\nimport lombok.Data;\\n\\nimport javax.persistence.*;\\n\\n@Entity\\n@Table(name = \\"person\\")\\n@Data\\npublic class Person {\\n\\n    @Id\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\n    @Column(name = \\"id\\")\\n    private Long id;\\n\\n    @Column(name = \\"first_name\\")\\n    private String firstName;\\n\\n    @Column(name = \\"last_name\\")\\n    private String lastName;\\n\\n    @Column(name = \\"email\\")\\n    private String email;\\n\\n    @ManyToOne(cascade = {\\n            CascadeType.DETACH,\\n            CascadeType.MERGE,\\n            CascadeType.REFRESH,\\n            CascadeType.PERSIST\\n    })\\n    @JoinColumn(name = \\"id_city\\")\\n    private City city;\\n\\n}\\n```\\n\\nPerhatikan pada bagian `cascade` di situ saya tidak mendefiniskan ke `all` karena kita memiliki 2 tabel yang berelasi dan kita tidak ingin agar jika data dihapus disalah satu tabel maka berpengaruh ke tabel lainnya, makanya saya mendefinisikan `cascade` nya secara manual dengan tidak memasukan `cascade` dengan tipe `CascadeType.REMOVE`.\\n\\n### Membuat Repository\\n\\nKemudian kita akan membuat dua Repository DAO untuk masing-masing entity ke dalam package `dao`.\\n\\n```java title=CityRepository.java\\npackage com.tutorialtimposu.backend.dao;\\n\\nimport com.tutorialtimposu.backend.entity.City;\\nimport org.springframework.data.jpa.repository.JpaRepository;\\n\\npublic interface CityRepository extends JpaRepository<City, Long> {\\n}\\n```\\n\\n```java title=PersonRepository\\npackage com.tutorialtimposu.backend.dao;\\n\\nimport com.tutorialtimposu.backend.entity.Person;\\nimport org.springframework.data.jpa.repository.JpaRepository;\\n\\npublic interface PersonRepository extends JpaRepository<Person, Long> {\\n}\\n```\\n\\nKita hanya membuat dua interface repository di atas menggunakan teknologi \\"Spring Magic\\" yaitu Spring Data REST JPA, dan kita tidak perlu tambahan class lagi, Spring akan secara otomatis membuatkan Service maupun REST Controllernya tanpa kita melakukan coding tambahan.\\n\\nUntuk mengujinya, jalankan aplikasi Spring Bootnya kemudian buka browser lalu ketik base-path url defaultnya ke `http://localhost:8080/api` sesuai konfigurasi properties yang sudah kita buat.\\n\\n![test browser](1.PNG)\\n\\nSpring secara otomatis sudah membuatkan kita REST Controller sendiri, perhatikan pada baris:\\n\\n```json\\n\\"cities\\": {\\n  \\"href\\": \\"http://localhost:8080/api/cities{?page,size,sort}\\",\\n  \\"templated\\": true\\n},\\n\\"persons\\": {\\n  \\"href\\": \\"http://localhost:8080/api/persons{?page,size,sort}\\",\\n  \\"templated\\": true\\n}\\n```\\n\\nDimana sudah membuatkan REST Controller untuk object `City` dengan nama `cities` ke url `http://localhost:8080/api/cities` dan object `Person` dengan nama `persons` ke url `http://localhost:8080/api/persons`. Spring secara otomatis membuatkan nama dari masing-masing URL api tersebut, secara magic.\\n\\nTes Url `http://localhost:8080/api/cities` untuk meload data dari tabel `city` dari database.\\n\\n![test browser](2.PNG)\\n\\nTes Url `http://localhost:8080/api/persons` untuk meload data dari tabel `person` dari database.\\n\\n![test browser](3.PNG)\\n\\n### Membatasi Akses REST\\n\\nSetelah berhasil membuat REST Api kita perlu menambahkan konfigurasi untuk menonaktifkan method `POST`, `PUT` dan `DELETE`.\\n\\nBuat class baru dan simpan ke dalam package `config`:\\n\\n```java title=DataRestConfig.java\\npackage com.tutorialtimposu.backend.config;\\n\\nimport com.tutorialtimposu.backend.entity.City;\\nimport com.tutorialtimposu.backend.entity.Person;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.data.rest.core.config.RepositoryRestConfiguration;\\nimport org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;\\nimport org.springframework.http.HttpMethod;\\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\\n\\n@Configuration\\npublic class DataRestConfig implements RepositoryRestConfigurer {\\n\\n    @Override\\n    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {\\n        // Method yang ingin dinonaktifkan POST, PUT dan DELETE\\n        HttpMethod[] unsupportedAction = {HttpMethod.POST, HttpMethod.PUT, HttpMethod.DELETE};\\n\\n        config.getExposureConfiguration()\\n                .forDomainType(Person.class)\\n                .withItemExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction))\\n                .withCollectionExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction));\\n\\n        config.getExposureConfiguration()\\n                .forDomainType(City.class)\\n                .withItemExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction))\\n                .withCollectionExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction));\\n    }\\n}\\n```\\n\\nTesting dengan aplikasi REST Client. Disini saya akan testing POST data baru:\\n\\n![test browser](4.PNG)\\n\\nRespon yang dihasilkan `405 - Method Not Allowed` kita tidak bisa mengakses method POST, berarti konfigurasi kita berhasil.\\n\\n## Angular Front End\\n\\n### Membuat project\\n\\nDisini kita akan membuat project Angular dengan Angluar CLI pastikan sudah terinstall terlebih dahulu. Kita akan menggunakan perintah `ng new angular-frontend`.\\n\\n```bash\\nng new angular-frontend\\n\\n? Would you like to add Angular routing? No\\n? Which stylesheet format would you like to use? CSS\\n```\\n\\n### Membuat Class\\n\\n```bash\\nng generate class model/Person\\n\\n```\\n\\n```typescript title=person.ts\\nexport class Person {\\n\\n    id!: number;\\n    firstName!: string;\\n    lastName!: string;\\n    email!: string;\\n}\\n````\\n\\n### Membuat Service\\n\\n```bash\\nng generate service service/person\\n```\\n\\n### Membuat Component\\n\\n```bash\\nng generate component component/person-list\\n```\\n\\n### Menambahkan Bootstrap\\n\\n```bash\\nnpm install bootstrap\\nnpm install @fortawesome/fontawesome-free\\n```\\n\\nlalu tambahkan di file `angular.json` :\\n\\n```json title=angular.json\\n...\\n\\n\\"styles\\": [\\n              \\"src/styles.css\\",\\n              \\"node_modules/bootstrap/dist/css/bootstrap.min.css\\",\\n              \\"node_modules/@fortawesome/fontawesome-free/all.min.css\\"\\n            ],\\n...\\n```"},{"id":"repo-lokal-ubuntu-22-04","metadata":{"permalink":"/blog/repo-lokal-ubuntu-22-04","source":"@site/blog/2022-05-06-repo-lokal-ubuntu-22-04.md","title":"Daftar Repository Lokal Ubuntu 22.04","description":"Repository lokal merupakan solusi, agar proses download/update software Ubuntu 22.04 lebih cepat, karena menggunakan Repository Lokal Indonesia.","date":"2022-05-06T00:00:00.000Z","formattedDate":"May 6, 2022","tags":[{"label":"ubuntu","permalink":"/blog/tags/ubuntu"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"repo-lokal-ubuntu-22-04","title":"Daftar Repository Lokal Ubuntu 22.04","authors":"topekox","tags":["ubuntu"]},"prevItem":{"title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular (READ Only)","permalink":"/blog/spring-boot-angular"},"nextItem":{"title":"Tips menangani NullPointerException dengan Java Optional","permalink":"/blog/java-optional"}},"content":"Repository lokal merupakan solusi, agar proses download/update software Ubuntu 22.04 lebih cepat, karena menggunakan Repository Lokal Indonesia.\\n\\nBerikut ini daftar repository lokal Ubuntu 22.04 :\\n\\n\x3c!--truncate--\x3e\\n\\n## kartolo.sby.datautama.net.id\\n\\n```bash\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy main restricted universe multiverse\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-security main restricted universe multiverse\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-proposed main restricted universe multiverse\\n```\\n\\n## kebo.pens.ac.id\\n\\n```bash\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy main restricted universe multiverse\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-security main restricted universe multiverse\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-proposed main restricted universe multiverse\\n```\\n\\n## ftp.itb.ac.id\\n\\n```bash\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy main restricted universe multiverse\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-security main restricted universe multiverse\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-proposed main restricted universe multiverse\\n```\\n\\n## buaya.klas.or.id\\n\\n```bash\\ndeb http://buaya.klas.or.id/ubuntu/ jammy main restricted universe multiverse\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-security main restricted universe multiverse\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-proposed main restricted universe multiverse\\n```\\n\\n## mirror.poliwangi.ac.id\\n\\n```bash\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy main restricted universe multiverse\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-security main restricted universe multiverse\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-proposed main restricted universe multiverse\\n```\\n\\n## Cara Update\\n\\nSilahkan pilih salah satu repository yang diinginkan, terus masukan kedalam file `sources.list` dengan menggunakan text editor pilihan anda, disini saya menggunakan `nano`:\\n\\n```bash\\nsudo nano /etc/apt/sources.list\\n```\\n\\nSilahkan hapus isi source yang ada atau cukup comment saja dengan menambahkan tanda `#` di setiap awal text pada repository default ubuntu, kemudian paste list repo lokal yang dipilih di bagian bawah.\\n\\nSetelah selesai silahkan update dengan perintah:\\n\\n```bash\\nsudo apt-get update\\n````"},{"id":"java-optional","metadata":{"permalink":"/blog/java-optional","source":"@site/blog/2022-04-26-java-optional.md","title":"Tips menangani NullPointerException dengan Java Optional","description":"Bagi programmer Java sudah wajib hukumnya untuk selalu bertemu dengan NullPointerException, dan ini sebenarnya membuat crash program kita, dan yang jelas kita harus sedikit garuk kepala untuk menangani exception ini. Cara yang paling populer adalah diakali dengan statement kondisi if else. Untuk menangani ini, Java versi 8 mengenalkan fitur baru yaitu class baru bernama Optional yang berada pada package java.util. Class ini sangat membantu sekali untuk menangani null tanpa harus dicek terlebih dahulu dengan statement kondisi if else.","date":"2022-04-26T00:00:00.000Z","formattedDate":"April 26, 2022","tags":[{"label":"java","permalink":"/blog/tags/java"},{"label":"java 8","permalink":"/blog/tags/java-8"}],"readingTime":3.59,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"java-optional","title":"Tips menangani NullPointerException dengan Java Optional","authors":"topekox","tags":["java","java 8"]},"prevItem":{"title":"Daftar Repository Lokal Ubuntu 22.04","permalink":"/blog/repo-lokal-ubuntu-22-04"},"nextItem":{"title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","permalink":"/blog/alasan-menggunakan-golang-enterprise"}},"content":"Bagi programmer Java sudah wajib hukumnya untuk selalu bertemu dengan `NullPointerException`, dan ini sebenarnya membuat crash program kita, dan yang jelas kita harus sedikit garuk kepala untuk menangani exception ini. Cara yang paling populer adalah diakali dengan statement kondisi `if else`. Untuk menangani ini, Java versi 8 mengenalkan fitur baru yaitu class baru bernama `Optional` yang berada pada package `java.util`. Class ini sangat membantu sekali untuk menangani `null` tanpa harus dicek terlebih dahulu dengan statement kondisi `if else`. \\n\\n\x3c!--truncate--\x3e\\n\\nBerikut contoh program yang menghasilkan `NullPointerException` :\\n\\n```java\\npublic class DemoOptional {\\n\\n    public static void main(String[] args) {\\n        \\n        String[] students = new String[20];\\n\\t    String john = students[10].toUpperCase();\\n\\n        System.out.println(\\"Name : \\" + john);        \\n    }\\n}\\n```\\n\\nSekilas program ini tidak ada yang salah, ketika dicompile program ini tidak akan mengalami pesan error, tetapi ketika dieksekusi program ini akan menghasilkan error dikarenakan variable `john` yang dipanggil masih belum ada nilainya alias `null`.\\n\\nKetika program ini di jalankan/run maka akan menghasilkan exception `NullPointerException`, karena memang array students index 10 masih bernilai `null`.\\n\\n```bash\\nException in thread \\"main\\" java.lang.NullPointerException: Cannot invoke \\"String.toUpperCase()\\" because \\"<local1>[10]\\" is null\\n\\tat DemoOptional.main(DemoOptional.java:6)\\n```\\n\\nNah untuk mengatasinya biasanya dibuatkan statement pemilihan `if` untuk menghandle exception tersebut misalnya seperti di bawah ini:\\n\\n```java\\nString[] students = new String[20];\\n\\n// cek nilai apakah null\\nif (students[10] == null) {\\n    students[10] = \\"John Doe\\";\\n}\\n\\nString john = students[10].toUpperCase();\\n\\nSystem.out.println(\\"Name : \\" + john);\\n```\\n\\nOutput:\\n\\n```bash\\nName : JOHN DOE\\n```\\n\\nContoh penggunaan `if` seperti contoh di atas tidaklah salah, tetapi karena seringnya programmer Java mendapatkan permasalahan seperti contoh di atas maka Java 8 membuatkan solusi lain menggunakan class `Optional`. Contoh program di atas dapat disederhanakan menggunakan class Optional seperti contoh sebagai berikut:\\n\\n```java\\nimport java.util.Optional;\\n\\npublic class DemoOptional {\\n    public static void main(String[] args) {\\n        String[] students = new String[20];\\n\\n        String john = Optional.ofNullable(students[10])\\n                .orElse(\\"John Doe\\").toUpperCase();\\n\\n        System.out.println(\\"Name : \\" + john);\\n    }\\n}\\n```\\n\\nOutput yang dihasilkan akan sama dengan program sebelumnya tetapi cara yang digunakan sedikit berbeda karena menggunakan class `Optional` untuk memeriksa nilai dari `student[10]` yang langsung memberikan nilai ketika bernilai Nullable.\\n\\nBeberapa contoh penggunaan Optional.\\n\\n:::info\\nYang berada dalam blok komentar adalah cara manual\\n:::\\n\\n## Check Null\\n\\n```java\\n//        String name = customer.getName();\\n//        if (name == null) {\\n//            name = \\"\\";\\n//        }\\n    \\n String name = Optional.ofNullable(customer.getName())\\n                .orElse(\\"\\");\\n```\\n\\n## if Logic\\n\\n```java\\n//        Customer customer = repository.findById(\\"id\\");\\n//        if (customer == null) {\\n//            customer = repository.createNew();\\n//        }\\n\\nString nameUpper = Optional.ofNullable(customer.getName())\\n                .map(value -> value.toUpperCase())\\n                .orElse(\\"\\");\\n```\\n\\n## Operation if Not Null\\n\\n```java\\n//                int id = 2;\\n//                Person person = session.get(Person.class, id);\\n//                if (person != null) {\\n//                  System.out.println(\\"Deleting\\");\\n//                  session.delete(person);\\n//                }\\n\\nint id = 2;\\nOptional<Person> person = Optional.ofNullable(session.get(Person.class, id));\\nperson.ifPresent(value -> session.delete(value));\\n```\\n\\n## Operation to Null Value\\n\\n```java\\n//        String nameUpper = customer.getName();\\n//        if (nameUpper != null) {\\n//            nameUpper = nameUpper.toUpperCase();\\n//        } else {\\n//            nameUpper = \\"\\";\\n//        }\\n\\nString nameUpper = Optional.ofNullable(customer.getName())\\n                .map(value -> value.toUpperCase())\\n                .orElse(\\"\\");\\n```\\n\\n## nested If Checking\\n\\n```java\\n//        String country = \\"Indonesia\\";\\n//        if (customer.getAddress() != null) {\\n//            if (customer.getAddress().getCountry() != null) {\\n//                country = customer.getAddress().getCountry();\\n//            }\\n//        }\\n\\nString country = Optional.ofNullable(customer.getAddress())\\n                .map(address -> address.getCountry())\\n                .orElse(\\"Indonesia\\");\\n\\n```\\n\\n## Check and Throw Exception\\n\\n```java\\n//        String name = customer.getName();\\n//        if (name == null) {\\n//            throw new IllegalArgumentException(\\"Name is null\\");\\n//        }\\n\\nString name = Optional.ofNullable(customer.getName())\\n                .orElseThrow(() -> new IllegalArgumentException(\\"Name is null\\"));\\n```\\n\\n## if Check Do Something\\n\\n```java\\n//        if (customer.getAddress() != null) {\\n//            if (customer.getAddress().getCountry() != null) {\\n//                System.out.println(customer.getAddress().getCountry());\\n//            }\\n//        }\\n\\nOptional.ofNullable(customer.getAddress())\\n                .map(address -> address.getCountry())\\n                .ifPresent(country -> System.out.println(country));\\n\\n```\\n\\n## neested Object\\n\\n```java\\n//        Long cashBalance = 0L;\\n//        if (customer.getWallet() != null) {\\n//            if (customer.getWallet().getBalance() != null) {\\n//                cashBalance = customer.getWallet().getBalance().getCashBalance();\\n//            }\\n//        }\\n\\nLong cashBalance = Optional.ofNullable(customer.getWallet())\\n                .map(wallet -> wallet.getBalance())\\n                .map(balance -> balance.getCashBalance())\\n                .orElse(0L);\\n```\\n\\n## Filter\\n\\n```java\\n//        Long bonus = 0L;\\n//        if (CustomerType.PLATINUM.equals(customer.getType())) {\\n//            if (customer.getWallet() != null) {\\n//                if (customer.getWallet().getBalance() != null) {\\n//                    bonus = customer.getWallet().getBalance().getCashBalance() * 10 / 100;\\n//                }\\n//            }\\n//        }\\n\\nLong bonus = Optional.ofNullable(customer)\\n                .filter(value -> CustomerType.PLATINUM.equals(customer.getType()))\\n                .map(value -> value.getWallet())\\n                .map(wallet -> wallet.getBalance())\\n                .map(balance -> balance.getCashBalance())\\n                .map(cashBalance -> cashBalance * 10 / 100)\\n                .orElse(0L);\\n```\\n\\n:::info\\nDownload [Source Code](https://github.com/TopekoX/java-optional-demo)\\n:::\\n\\n**Referensi** :\\n* [https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)\\n* [https://www.youtube.com/watch?v=mucDS5Db9go](https://www.youtube.com/watch?v=mucDS5Db9go)"},{"id":"alasan-menggunakan-golang-enterprise","metadata":{"permalink":"/blog/alasan-menggunakan-golang-enterprise","source":"@site/blog/2022-04-09-alasan-menggunakan-go.md","title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","description":"Saat ini kita memiliki banyak pilihan bahasa pemrograman untuk membangun aplikasi berskala besar atau enterpise untuk skala perusahaan . Salah satu bahasa pemrograman yang mendapatkan daya tarik yang signifikan dalam beberapa tahun terakhir adalah Go atau Golang. Bahasa ini menawarkan banyak manfaat bagi bisnis dan pengembang aplikasi.","date":"2022-04-09T00:00:00.000Z","formattedDate":"April 9, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"enterprise","permalink":"/blog/tags/enterprise"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"alasan-menggunakan-golang-enterprise","title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","authors":"topekox","tags":["golang","enterprise"]},"prevItem":{"title":"Tips menangani NullPointerException dengan Java Optional","permalink":"/blog/java-optional"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Saat ini kita memiliki banyak pilihan bahasa pemrograman untuk membangun aplikasi berskala besar atau enterpise untuk skala perusahaan . Salah satu bahasa pemrograman yang mendapatkan daya tarik yang signifikan dalam beberapa tahun terakhir adalah Go atau Golang. Bahasa ini menawarkan banyak manfaat bagi bisnis dan pengembang aplikasi.\\n\\n\x3c!--truncate--\x3e\\n\\n![Golang](/img/golang/golang-logo.png \\"Golang\\")\\n\\nPertanyaan pertama yang muncul ketika perusahaan/startup mulai membangun aplikasi adalah Bahasa pemrograman mana yang harus dipilih?. Pilihannya pun saat ada banyak sekali seperti PHP, C#, Java, Python, JavaScript dll, dengan kelebihan dan kekurangannya sendiri. Bahasa Pemrograman Golang atau Go hadir dengan fitur yang bisa dibilang untuk menambal kekurangan pada bahasa pemrograman yang telah ada.\\n\\n## Mengapa Menggunakan Golang?\\n\\nGo atau Golang adalah bahasa pemrograman open-source yang dirancang oleh Google. Penghargaan untuk pengembangannya diberikan kepada Rob Pike, Robert Griesemer, dan Ken Thompson. Bahasa ini dirancang untuk meningkatkan kecepatan pemrograman dan mengemas yang terbaik dari banyak bahasa populer seperti pengetikan statis C++, dan Kegunaan dan Keterbacaan JavaScript. Secara sintaksis mirip dengan bahasa C tetapi dengan pengetikan struktural, pengumpulan sampah, dan keamanan memori.\\n\\nGolang banyak digunakan di beberapa perusahaan besar seperti Google, IBM, BBC, Apple dan Twitter dll. Melihat keberhasilan bahasa pemrograman tersebut, banyak perusahaan kecil dan menengah dan perusahaan rintisan/startup juga mulai menggunakan Go untuk pengembangan aplikasi.\\n\\n## Keuntungan menggunakan Golang?\\n\\nGolang menawarkan banyak manfaat untuk skala enterprise seperti:\\n\\n1. **Fleksibilitas**: Golang dapat digunakan untuk mengembangkan berbagai aplikasi mulai dari aplikasi sederhana hingga aplikasi yang kompleks pada perusahaan. Tidak hanya mampu memenuhi kebutuhan perusahaan teknologi tetapi juga industri lain seperti keuangan, media dll.\\n2. **Dukungan Lintas Platform**: Perusahaan dapat menggunakan bahasa pemrograman Golang untuk membangun aplikasi lintas platform. Bahasa ini mendukung berbagai platform termasuk Windows, Linux, dan platform seluler.\\n3. **Pengembangan Lebih Cepat**: Perusahaan lebih menyukai bahasa pemrograman yang membantu mereka membangun aplikasi lebih cepat. Golang dapat dikembangkan dengan cepat. Tidak ada Mesin Virtual di lingkungan Go dan kodenya langsung dikompilasi ke kode mesin, ini membuat kompilasi lebih cepat. Dengan kompiler yang memproduksi, hanya satu file yang dapat dieksekusi dan dapat diunggah dari mana saja, eksekusi kode juga menjadi cepat.\\n4. **Skalabilitas**: Pertimbangan utama lainnya untuk tim pengembangan aplikasi perusahaan saat memilih bahasa pemrograman. Golang mendukung skalabilitas. Ini menggunakan fungsi dasar yang disebut *Goroutines* yang dapat berjalan secara independen dan simultan dan mandiri untuk memungkinkan penanganan banyak tugas sekaligus.\\n5. **Kinerja Aplikasi**: Faktor penentu keberhasilan suatu aplikasi adalah kinerjanya. Golang menawarkan kinerja luar biasa dan pengalaman aplikasi yang menyenangkan. Membutuhkan lebih sedikit sumber daya sistem dan berjalan dengan baik pada perangkat yang lebih lama. Karena mengkonsumsi lebih sedikit RAM, aplikasi ini juga stabil dengan lebih sedikit kemungkinan aplikasi utuk crash.\\n\\nSelain 5 alasan di atas mengapa perusahaan harus memilih Golang, alasan lainnya adalah ketersediaan programmer Golang. Bahasanya mudah dipelajari, jadi pengembang aplikasi Anda dapat dengan cepat membangun aplikasi Golang dalamnya."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2022-03-20-welcome/index.md","title":"Welcome","description":"Selamat Datang di Tutorial Timposu. Website ini dibuat dengan tujuan untuk membagikan tutorial bahasa pemrograman maupun ilmu komputer seputarnya. Website ini dibuat dan di-maintenance oleh Ucup Topekox. Sedangkan latar belakang pembuatan website justru untuk dokumentasi, kenapa dokumentasi?.","date":"2022-03-20T00:00:00.000Z","formattedDate":"March 20, 2022","tags":[{"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":0.87,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"Tutorial Timposu creator","url":"https://topekox.github.io","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["topekox"],"tags":["blog"]},"prevItem":{"title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","permalink":"/blog/alasan-menggunakan-golang-enterprise"}},"content":"Selamat Datang di Tutorial Timposu. Website ini dibuat dengan tujuan untuk membagikan tutorial bahasa pemrograman maupun ilmu komputer seputarnya. Website ini dibuat dan di-maintenance oleh [Ucup Topekox](https://topekox.github.io/). Sedangkan latar belakang pembuatan website justru untuk dokumentasi, kenapa dokumentasi?. \\n\\n\x3c!--truncate--\x3e\\n\\nIya benar dokumentasi karena sebenarnya saya dan mungkin hampir semua manusia memiliki sifat pelupa, oleh karena itu saya berinisiatif untuk mendokumentasikan apa yang saya telah pelajari dan ketahui. Selain itu disela-sela waktu saya juga sering mengajar, dan karena biasanya ada saja siswa yang meminta materi langsung saja saya arahkan ke website ini.\\n\\nPenyusunan tutorial pada website ini sedemikianrupa dibuat dengan jalur roadmap yang jelas sehingga teman-teman dapat belajar dengan lebih terarah. Selain itu pada website ini juga terdapat artikel blog yang berisi informasi seputar dunia pemrograman dan lainnya. Apabila ada pertanyaan seputar website ini silahkan hubungi saya di ucup.topekox@gmail.com ataupun di media sosial saya.\\n\\nAkhir kata semoga website ini dapat berguna bagi teman-teman semua, dan apabila ingin mensupport website ini, sudi kiranya teman-teman membagikan/memberitahukan website kepada siapapun yang membutuhkan, agar ilmunya tidak berhenti anda saja.\\n\\n![Quotes](menulis.jpg)"}]}')}}]);