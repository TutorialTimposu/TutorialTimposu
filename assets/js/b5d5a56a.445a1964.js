"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[3268],{3159:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"java-collection/sortedmap","title":"Java SortedMap","description":"SortedMap adalah implementasi Map dengan data key diurutkan sesuai dengan Comparable key atau bisa menggunakan Comparator. SortedMap cocok untuk kasus yang posisi key pada Map harus berurut.","source":"@site/tutorial/java/java-collection/14-sortedmap.md","sourceDirName":"java-collection","slug":"/java-collection/sortedmap","permalink":"/java/java-collection/sortedmap","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14,"title":"Java SortedMap"},"sidebar":"tutorialSidebar","previous":{"title":"Immutable Map","permalink":"/java/java-collection/immutable-map"},"next":{"title":"Java NavigableMap","permalink":"/java/java-collection/navigablemap"}}');var r=e(4848),o=e(8453);const i={sidebar_position:14,title:"Java SortedMap"},s=void 0,p={},c=[{value:"Immutable SortedMap",id:"immutable-sortedmap",level:2}];function l(t){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"SortedMap"})," adalah implementasi Map dengan data key diurutkan sesuai dengan ",(0,r.jsx)(a.code,{children:"Comparable"})," key atau bisa menggunakan ",(0,r.jsx)(a.code,{children:"Comparator"}),". ",(0,r.jsx)(a.code,{children:"SortedMap"})," cocok untuk kasus yang posisi key pada Map harus berurut."]}),"\n",(0,r.jsx)(a.p,{children:"Contoh:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'import java.util.Comparator;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\npublic class DemoSortedMap {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// membuat comparator\n\t\tComparator<String> comparator = new Comparator<String>() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int compare(String o1, String o2) {\n\t\t\t\t// membuat compare descending\n\t\t\t\treturn o2.compareTo(o1);\n\t\t\t}\n\t\t};\n\t\t\n\t\tSortedMap<String, String> countrys = new TreeMap<String, String>(comparator);\n\t\tcountrys.put("th", "Thailand");\n\t\tcountrys.put("cn", "China");\n\t\tcountrys.put("my", "Malaysia");\n\t\tcountrys.put("vn", "Vietnam");\n\t\t\n\t\tfor (var key : countrys.keySet()) {\n\t\t\tSystem.out.println(key);\n\t\t}\n\t}\n\t\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"immutable-sortedmap",children:"Immutable SortedMap"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'// Immutable SortedMap\nSortedMap<String, String> immutableSortedMap = Collections.unmodifiableSortedMap(countrys);\n\n// immutableSortedMap.put("rs", "Russia"); // Error\n\n// Membuat empty SortedMap\nSortedMap<String, String> emptySortedMap = Collections.emptySortedMap();\n'})})]})}function u(t={}){const{wrapper:a}={...(0,o.R)(),...t.components};return a?(0,r.jsx)(a,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},8453:(t,a,e)=>{e.d(a,{R:()=>i,x:()=>s});var n=e(6540);const r={},o=n.createContext(r);function i(t){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function s(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),n.createElement(o.Provider,{value:a},t.children)}}}]);