"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[6816],{3216:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"maven/distribution-file","title":"Distribution File","description":"Secara default, maven mendukung pembuatan distribution file menggunakan lifecycle package. Hanya saja, hasil distribution file nya berupa file jar yang berisikan binary code dari project kita. Dependency lainnya tidak dimasukkan, sehingga tidak bisa langsung dijalankan.","source":"@site/tutorial/java/maven/09-distribution-file.md","sourceDirName":"maven","slug":"/maven/distribution-file","permalink":"/java/maven/distribution-file","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"Distribution File"},"sidebar":"tutorialSidebar","previous":{"title":"Maven Properties","permalink":"/java/maven/maven-properties"},"next":{"title":"Multi Module Project","permalink":"/java/maven/multi-module-project"}}');var t=a(4848),s=a(8453);const l={sidebar_position:9,title:"Distribution File"},r=void 0,u={},d=[{value:"Assembly Plugin",id:"assembly-plugin",level:2},{value:"Menggunakan Assembly Plugin",id:"menggunakan-assembly-plugin",level:2},{value:"1\ufe0f\u20e3 Pasang Konfigurasi",id:"1\ufe0f\u20e3-pasang-konfigurasi",level:3},{value:"2\ufe0f\u20e3 Tentukan Main Class",id:"2\ufe0f\u20e3-tentukan-main-class",level:3},{value:"3\ufe0f\u20e3 Build Project",id:"3\ufe0f\u20e3-build-project",level:3}];function o(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Secara default, maven mendukung pembuatan distribution file menggunakan lifecycle package. Hanya saja, hasil distribution file nya berupa file jar yang berisikan binary code dari project kita. Dependency lainnya tidak dimasukkan, sehingga tidak bisa langsung dijalankan."}),"\n",(0,t.jsx)(e.h2,{id:"assembly-plugin",children:"Assembly Plugin"}),"\n",(0,t.jsx)(e.p,{children:"Salah satu plugin yang bisa kita gunakan untuk membuat distribution file beserta dependency yang kita butuhkan adalah Assembly Plugin."}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://maven.apache.org/plugins/maven-assembly-plugin/usage.html",children:"https://maven.apache.org/plugins/maven-assembly-plugin/usage.html"})})}),"\n",(0,t.jsxs)(e.p,{children:["Tidak hanya Assembly Plugin, sebenarnya masih banyak plugin lain yang bisa kita gunakan untuk membuat distribution file di Maven. Untuk membuat distribution file, kita bisa menggunakan perintah ",(0,t.jsx)(e.code,{children:"mvn package assembly:single"}),"."]}),"\n",(0,t.jsx)(e.h2,{id:"menggunakan-assembly-plugin",children:"Menggunakan Assembly Plugin"}),"\n",(0,t.jsxs)(e.p,{children:["Untuk melakukan konfigurasi kita perlu edit file ",(0,t.jsx)(e.code,{children:"pom.xml"}),":"]}),"\n",(0,t.jsx)(e.h3,{id:"1\ufe0f\u20e3-pasang-konfigurasi",children:"1\ufe0f\u20e3 Pasang Konfigurasi"}),"\n",(0,t.jsxs)(e.p,{children:["Pasang konfigurasi plugin dalam tag ",(0,t.jsx)(e.code,{children:"<plugins>"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:"<project>\n\t[...]\n\t<build>\n\t[...]\n\t<plugins>\n\t\t<plugin>\n\t\t\x3c!-- NOTE: We don't need a groupId specification because the group is\n\t\t\t\torg.apache.maven.plugins ...which is assumed by default.\n\t\t\t--\x3e\n\t\t<artifactId>maven-assembly-plugin</artifactId>\n\t\t<version>3.7.1</version>\n\t\t<configuration>\n\t\t\t<descriptorRefs>\n\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t</descriptorRefs>\n\t\t</configuration>\n\t\t[...]\n</project>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2\ufe0f\u20e3-tentukan-main-class",children:"2\ufe0f\u20e3 Tentukan Main Class"}),"\n",(0,t.jsxs)(e.p,{children:["Secara default Maven dan Assembly Plugin ketika di Build tidak mengetahui Main Class project kita kita perlu mendefinisikannya ke dalam tag ",(0,t.jsx)(e.code,{children:"<configuration>"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:"<project>\n\t[...]\n\t<build>\n\t[...]\n\t<plugins>\n\t\t<plugin>\n\t\t<artifactId>maven-assembly-plugin</artifactId>\n\t\t<version>3.7.1</version>\n\t\t<configuration>\n\t\t\t[...]\n\t\t\t<archive>\n\t\t\t<manifest>\n\t\t\t\t<mainClass>com.timposulabs.belajar.App</mainClass>\n\t\t\t</manifest>\n\t\t\t</archive>\n\t\t</configuration>\n\t\t[...]\n\t\t</plugin>\n\t\t[...]\n</project>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3\ufe0f\u20e3-build-project",children:"3\ufe0f\u20e3 Build Project"}),"\n",(0,t.jsx)(e.p,{children:"Melakukan build project dengan perintah:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"mvn clean package assembly:single\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Hasil build terdapat dalam direktori ",(0,t.jsx)(e.code,{children:"target/"}),", yang 2 file berekstensi ",(0,t.jsx)(e.code,{children:"*.jar"}),", dimana yang memiliki nama file ",(0,t.jsx)(e.code,{children:" <nama-project>jar-with-dependencies.jar"}),", adalah hasil build yang sudah include dengan dependencinya."]})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>l,x:()=>r});var i=a(6540);const t={},s=i.createContext(t);function l(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);