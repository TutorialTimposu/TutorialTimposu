"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[9934],{7347:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"java-collection/abstract-class-collections","title":"Abstract Class Collections","description":"Struktur data collection di Java selalu berkembang, namun biasanya algoritma dasarnya selalu sama antar jenis collection. Hampir semua interface collection di Java sudah disediakan abstract class nya sebagai dasar algoritma nya, dan hampir semua implementasi class konkrit nya selalu extends abstract class collection. Hal ini mempermudah kita, jika ingin membuat collection manual, kita tidak perlu membuat dari awal, kita bisa menggunakan abstract class yang sudah disediakan.","source":"@site/tutorial/java/java-collection/21-abstract-class-collections.md","sourceDirName":"java-collection","slug":"/java-collection/abstract-class-collections","permalink":"/java/java-collection/abstract-class-collections","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":21,"frontMatter":{"sidebar_position":21,"title":"Abstract Class Collections"},"sidebar":"tutorialSidebar","previous":{"title":"Collections Class","permalink":"/java/java-collection/collections-class"},"next":{"title":"Default Method","permalink":"/java/java-collection/default-method"}}');var s=n(4848),l=n(8453);const i={sidebar_position:21,title:"Abstract Class Collections"},r=void 0,c={},o=[{value:"Abstract Class Collection",id:"abstract-class-collection",level:2},{value:"Contoh Abstract Class Collection",id:"contoh-abstract-class-collection",level:2}];function u(t){const e={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"Struktur data collection di Java selalu berkembang, namun biasanya algoritma dasarnya selalu sama antar jenis collection. Hampir semua interface collection di Java sudah disediakan abstract class nya sebagai dasar algoritma nya, dan hampir semua implementasi class konkrit nya selalu extends abstract class collection. Hal ini mempermudah kita, jika ingin membuat collection manual, kita tidak perlu membuat dari awal, kita bisa menggunakan abstract class yang sudah disediakan."}),"\n",(0,s.jsx)(e.h2,{id:"abstract-class-collection",children:"Abstract Class Collection"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Abstract Class"}),(0,s.jsx)(e.th,{children:"Untuk"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"AbstractCollection"}),(0,s.jsx)(e.td,{children:"Collection"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"AbstractList"}),(0,s.jsx)(e.td,{children:"List"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"AbstractMap"}),(0,s.jsx)(e.td,{children:"Map"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"AbstractQueue"}),(0,s.jsx)(e.td,{children:"Queue"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"AbstractSet"}),(0,s.jsx)(e.td,{children:"Set"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"contoh-abstract-class-collection",children:"Contoh Abstract Class Collection"}),"\n",(0,s.jsx)(e.p,{children:"Contoh misalnya kita membuat collection Queue dengan single element."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'import java.util.AbstractQueue;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.Queue;\n\n// membuat custom collection Queue single queue dari AbstractQueue class\nclass SingleQueue<E> extends AbstractQueue<E> {\n\n\tprivate E data;\n\t\n\t@Override\n\tpublic boolean offer(E e) {\n\t\tif (data == null) {\n\t\t\tdata = e;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic E poll() {\n\t\tE temp = data;\n\t\tdata = null;\n\t\treturn temp;\n\t}\n\n\t@Override\n\tpublic E peek() {\n\t\treturn data;\n\t}\n\n\t@Override\n\tpublic Iterator<E> iterator() {\n\t\treturn Collections.singleton(data).iterator();\n\t}\n\n\t@Override\n\tpublic int size() {\n\t\treturn data == null ? 0 : 1;\n\t}\n\t\n}\n\npublic class DemoAbstractClass {\n\n\tpublic static void main(String[] args) {\n\t\tQueue<String> singleQueue = new SingleQueue<>();\n\t\t\n\t\tSystem.out.println(singleQueue.size());\n\t\t\n\t\tSystem.out.println(singleQueue.offer("Ucup"));\n\t\tSystem.out.println(singleQueue.offer("Ade"));\n\t\tSystem.out.println(singleQueue.offer("Restu"));\n\t\t\n\t\tSystem.out.println(singleQueue.size());\n\t\tSystem.out.println(singleQueue.peek());\n\t\tSystem.out.println(singleQueue.size());\n\t\tSystem.out.println(singleQueue.poll());\n\t\tSystem.out.println(singleQueue.size());\t\n\t\t\n\t}\n\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"0\ntrue\nfalse\nfalse\n1\nUcup\n1\nUcup\n0\n"})})]})}function d(t={}){const{wrapper:e}={...(0,l.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(u,{...t})}):u(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>r});var a=n(6540);const s={},l=a.createContext(s);function i(t){const e=a.useContext(l);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:i(t.components),a.createElement(l.Provider,{value:e},t.children)}}}]);