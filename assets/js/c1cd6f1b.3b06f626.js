"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[4459],{5628:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>o});var t=n(4219),r=n(4848),i=n(8453);const s={slug:"java-record",title:"Apa itu Java Record",authors:"topekox",tags:["java"]},c=void 0,d={authorsImageUrls:[void 0]},o=[{value:"Tanpa Java Record",id:"tanpa-java-record",level:2},{value:"Menggunakan Java Record",id:"menggunakan-java-record",level:2},{value:"Constructor pada Java Record",id:"constructor-pada-java-record",level:2},{value:"Method pada Java Record",id:"method-pada-java-record",level:2},{value:"Lihat juga",id:"lihat-juga",level:2}];function l(a){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Java Record merupakan fitur baru yang ada pada Java 14. Java record merupakan class khusus yang menyederhanakan penulisan kode Java yang memiliki data yang tidak dapat diubah atau immutable. Ketika membuat Java Record secara otomatis akan dibuatkan ",(0,r.jsx)(e.code,{children:"constructor"}),", method ",(0,r.jsx)(e.code,{children:"equals()"}),", ",(0,r.jsx)(e.code,{children:"getter()"}),", ",(0,r.jsx)(e.code,{children:"toString()"}),", ",(0,r.jsx)(e.code,{children:"hasCode()"})," tapi tidak membuatkan ",(0,r.jsx)(e.code,{children:"setter()"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"tanpa-java-record",children:"Tanpa Java Record"}),"\n",(0,r.jsxs)(e.p,{children:["Misalkan kita membuat class dengan memiliki field ",(0,r.jsx)(e.code,{children:"name"})," dan ",(0,r.jsx)(e.code,{children:"city"}),". Berikut contoh class immutable umum yang sering dibuat:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public final class Person {\n    private final String name;\n    private final String city;\n\n    public Person(String name, String city) {\n        this.name = name;\n        this.city = city;\n    }\n\n    String name() { \n    \treturn this.name; \n    }\n\n    String city()  { \n    \treturn this.city; \n    }\n\n    public boolean equals() {\n      \t//...\n    }\n    public int hashCode() {\n      \t//...\n    }\n    \n    public String toString() {\n    \t//...\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"menggunakan-java-record",children:"Menggunakan Java Record"}),"\n",(0,r.jsx)(e.p,{children:"Nah.. Kode panjang di atas bisa diimplementasikan dengan Java Record sehingga syntaksnya menjadi lebih simpel seperti berikut:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public record PersonRecord(String name, String city) { }\n"})}),"\n",(0,r.jsx)(e.p,{children:"Misalnya kita buat class main agar melakukan output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class DemoJavaRecord {\n\tpublic static void main(String[] args) {\n\t\tPersonRecord myRecord = new PersonRecord("Ucup", "Makassar");\n\t\tSystem.out.println(myRecord);\n\t\tSystem.out.println("Name: " + myRecord.name()); //tidak menggunakan getter pada umummnya\n\t\tSystem.out.println("City: " + myRecord.city());\n\t}\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"MyJavaRecord[name=Ucup, city=Makassar]\nName: Ucup\nCity: Makassar\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Seperti sudah dijelaskan sebelumnya, pada record class kita hanya dapat memanggil ",(0,r.jsx)(e.code,{children:"getter()"})," dan setiap constructor yang didefinisikan bersifat final, yang artinya pada contoh di atas value ",(0,r.jsx)(e.code,{children:"name"})," dan ",(0,r.jsx)(e.code,{children:"city"})," tidak dapat diubah. Sehingga, jika kita menambahkan method ",(0,r.jsx)(e.code,{children:"setter()"})," untuk class record maka akan terjadi error."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public record PersonRecord(String name, String city) {\n\n//\tERROR: karena field bersifat final\n//\tvoid setName(String name) {\n//\t\tthis.name = name;\n//\t}\n\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"constructor-pada-java-record",children:"Constructor pada Java Record"}),"\n",(0,r.jsx)(e.p,{children:"Saat membuat class record, secara default Java juga membuatkan constructor dengan paramater yang sama pada saat class record dibuat, tapi kita juga dapat menambahkan constructor sendiri. Constructor custom ini dapat digunakan misalnya dalam kondisi tertentu, contohnya untuk validasi."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public record StudentRecord(String firstName, String lastName, int scores) {\n\n\tpublic StudentRecord {\n\t\tif (scores < 50) {\n\t\t\tSystem.out.println("Maaf!!! Siswa atas nama " + firstName + " " + lastName + " TIDAK LULUS");\n\t\t} else {\n\t\t\tSystem.out.println("Selamat!!! Siswa atas nama " + firstName + " " + lastName + " LULUS");\n\t\t}\n\t}\n\t\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Main class:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class DemoRecordApp {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tnew StudentRecord("Ucup", "Bahlul", 30);\n\t\tnew StudentRecord("Abu", "Nawas", 60);\n\t\t\n\t}\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Maaf!!! Siswa atas nama Ucup Bahlul TIDAK LULUS\nSelamat!!! Siswa atas nama Abu Nawas LULUS\n"})}),"\n",(0,r.jsx)(e.h2,{id:"method-pada-java-record",children:"Method pada Java Record"}),"\n",(0,r.jsx)(e.p,{children:"Pada Java Record dimungkinkan untuk membuat method contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public record StudentRecord(String firstName, String lastName, int scores) {\n\n\tpublic String sayHello(){\n\t\treturn "My name is: " + firstName + " " + lastName + ", and my score: " + scores;\n\t}\n\t\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Walaupun dimungkinkan dalam membuat method pada Java Record, tapi kita harus menghidari penggunaan method sebagai utility, karena sejatinya Java Record tujuannya untuk pembawa data."}),"\n",(0,r.jsx)(e.h2,{id:"lihat-juga",children:"Lihat juga"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.oracle.com/en/java/javase/17/language/records.html",children:"https://docs.oracle.com/en/java/javase/17/language/records.html"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.infoq.com/articles/exploring-java-records/",children:"https://www.infoq.com/articles/exploring-java-records/"})}),"\n"]})]})}function u(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(l,{...a})}):l(a)}},8453:(a,e,n)=>{n.d(e,{R:()=>s,x:()=>c});var t=n(6540);const r={},i=t.createContext(r);function s(a){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function c(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:s(a.components),t.createElement(i.Provider,{value:e},a.children)}},4219:a=>{a.exports=JSON.parse('{"permalink":"/blog/java-record","source":"@site/blog/2023-11-13-java-record.md","title":"Apa itu Java Record","description":"Java Record merupakan fitur baru yang ada pada Java 14. Java record merupakan class khusus yang menyederhanakan penulisan kode Java yang memiliki data yang tidak dapat diubah atau immutable. Ketika membuat Java Record secara otomatis akan dibuatkan constructor, method equals(), getter(), toString(), hasCode() tapi tidak membuatkan setter().","date":"2023-11-13T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-record","title":"Apa itu Java Record","authors":"topekox","tags":["java"]},"unlisted":false,"prevItem":{"title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","permalink":"/blog/menulis-versi-rilis-software"},"nextItem":{"title":"Apa itu Java Anonymous Class","permalink":"/blog/java-anonymous-class"}}')}}]);