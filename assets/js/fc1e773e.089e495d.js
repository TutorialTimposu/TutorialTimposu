"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[7634],{2375:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>u,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"java-collection/queue","title":"Java Queue","description":"Queue digunakan untuk memasukan data berdasarkan antrian (siapa yang pertama masuk dia yang pertama keluar) FIFO (First In First Out). Interface Queue mempunyai 3 class konkrit yaitu ArrayDeque, PriorityQueue dan LinkedList","source":"@site/tutorial/java/java-collection/10-queue.md","sourceDirName":"java-collection","slug":"/java-collection/queue","permalink":"/java/java-collection/queue","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Java Queue"},"sidebar":"tutorialSidebar","previous":{"title":"Java NavigableSet","permalink":"/java/java-collection/navigableset"},"next":{"title":"Java Deque","permalink":"/java/java-collection/deque"}}');var i=a(4848),r=a(8453);const u={sidebar_position:10,title:"Java Queue"},s=void 0,o={},l=[{value:"<code>ArrayDeque</code> vs <code>LinkedList</code> vs <code>PriorityQueue</code>",id:"arraydeque-vs-linkedlist-vs-priorityqueue",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Queue"})," digunakan untuk memasukan data berdasarkan antrian (siapa yang pertama masuk dia yang pertama keluar) FIFO (First In First Out). Interface ",(0,i.jsx)(n.code,{children:"Queue"})," mempunyai 3 class konkrit yaitu ",(0,i.jsx)(n.code,{children:"ArrayDeque"}),", ",(0,i.jsx)(n.code,{children:"PriorityQueue"})," dan ",(0,i.jsx)(n.code,{children:"LinkedList"})]}),"\n",(0,i.jsxs)(n.h3,{id:"arraydeque-vs-linkedlist-vs-priorityqueue",children:[(0,i.jsx)(n.code,{children:"ArrayDeque"})," vs ",(0,i.jsx)(n.code,{children:"LinkedList"})," vs ",(0,i.jsx)(n.code,{children:"PriorityQueue"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ArrayDeque"})," = menggunakan array sebagai implementasi queue nya"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LinkedList"})," = menggunakan double linked list sebagai implementasi queue nya"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PriorityQueue"})," = menggunakan array sebagai implementasi queue nya, namun diurutkan menggunakan ",(0,i.jsx)(n.code,{children:"Comparable"})," atau ",(0,i.jsx)(n.code,{children:"Comparator"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Berikut Contoh penggunaan ",(0,i.jsx)(n.code,{children:"Queue"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayDeque;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\n\npublic class DemoQueue {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n//\t\tQueue<String> names = new ArrayDeque<String>();\n\t\tQueue<String> names = new PriorityQueue<String>(); // mengurutkan data element dengan menggukan comparator\n\t\t\n\t\tnames.add("Ucup");\n\t\tnames.add("Dika");\n\t\tnames.add("Anton");\n\t\tnames.add("Shena");\n\t\t\n\t\tfor ( String next = names.poll(); next != null; next = names.poll() ) {\n\t\t\tSystem.out.println(next);\n\t\t}\n\n\t\tSystem.out.println(names.size());\n\t}\n\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>u,x:()=>s});var t=a(6540);const i={},r=t.createContext(i);function u(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:u(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);